{"version":3,"file":"ColorPickerGridCell.styles.js","sourceRoot":"../src/","sources":["components/SwatchColorPicker/ColorPickerGridCell.styles.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,uBAAuB,EAAE,MAAM,iBAAiB,CAAC;AAG1D,MAAM,CAAC,IAAM,SAAS,GAAG,UAAC,KAAqC;IACrD,IAAA,mBAAK,EAAE,yBAAQ,EAAE,yBAAQ,EAAE,qBAAM,EAAE,uBAAO,EAAE,qBAAM,EAAE,mBAAK,EAAE,+BAAW,CAAW;IACjF,IAAA,qCAAc,CAAW;IAEjC,OAAO;QACL,wCAAwC;QACxC,SAAS,EAAE;YACT;gBACE,eAAe,EAAE,cAAc,CAAC,cAAc;gBAC9C,OAAO,EAAE,CAAC;gBACV,QAAQ,EAAE,UAAU;gBACpB,SAAS,EAAE,YAAY;gBACvB,OAAO,EAAE,cAAc;gBACvB,MAAM,EAAE,SAAS;gBACjB,UAAU,EAAE,MAAM;gBAClB,MAAM,EAAE,MAAM;gBACd,KAAK,EAAE,KAAK;gBACZ,SAAS;oBACP,8BAA8B;oBAC9B,GAAC,MAAI,uBAAuB,oBAAiB,IAAG,EAAE,OAAO,EAAE,MAAM,EAAE;oBACnE,4BAA4B;oBAC5B,GAAC,MAAI,uBAAuB,aAAU,IAAG,EAAE,OAAO,EAAE,eAAa,cAAc,CAAC,WAAa,EAAE;uBAChG;aACF;YACD,MAAM,IAAI;gBACR,YAAY,EAAE,MAAM;aACrB;YACD,QAAQ,IAAI;gBACV,OAAO,EAAE,WAAW;gBACpB,MAAM,EAAK,WAAW,iBAAY,KAAK,CAAC,OAAO,CAAC,kBAAoB;aACrE;YACD,CAAC,QAAQ,IAAI;gBACX,SAAS;oBACP,GAAC,4BAA4B,IAAG;wBAC9B,eAAe,EAAE,cAAc,CAAC,cAAc;wBAC9C,OAAO,EAAE,WAAW;wBACpB,MAAM,EAAK,WAAW,iBAAY,KAAK,CAAC,OAAO,CAAC,YAAc;qBAC/D;uBACF;aACF;YACD,QAAQ,IAAI;gBACV,KAAK,EAAE,cAAc,CAAC,gBAAgB;gBACtC,aAAa,EAAE,MAAM;gBACrB,OAAO,EAAE,GAAG;aACb;YACD,OAAO;gBACL,CAAC,QAAQ,IAAI;gBACX,0BAA0B;gBAC1B,eAAe,EAAE,cAAc,CAAC,WAAW;gBAC3C,OAAO,EAAE,CAAC;aACX;SACJ;QACD,iCAAiC;QACjC,GAAG,EAAE;YACH;gBACE,KAAK,EAAE,MAAM;gBACb,MAAM,EAAE,MAAM;aACf;YACD,MAAM,IAAI;gBACR,YAAY,EAAE,MAAM;aACrB;SACF;KACF,CAAC;;AACJ,CAAC,CAAC","sourcesContent":["import { IsFocusVisibleClassName } from '../../Utilities';\r\nimport { IColorPickerGridCellStyleProps, IColorPickerGridCellStyles } from './ColorPickerGridCell.types';\r\n\r\nexport const getStyles = (props: IColorPickerGridCellStyleProps): IColorPickerGridCellStyles => {\r\n  const { theme, disabled, selected, circle, isWhite, height, width, borderWidth } = props;\r\n  const { semanticColors } = theme;\r\n\r\n  return {\r\n    // this is a button that wraps the color\r\n    colorCell: [\r\n      {\r\n        backgroundColor: semanticColors.bodyBackground,\r\n        padding: 0,\r\n        position: 'relative',\r\n        boxSizing: 'border-box',\r\n        display: 'inline-block',\r\n        cursor: 'pointer',\r\n        userSelect: 'none',\r\n        height: height,\r\n        width: width,\r\n        selectors: {\r\n          // remove default focus border\r\n          [`.${IsFocusVisibleClassName} &:focus::after`]: { display: 'none' },\r\n          // add a custom focus border\r\n          [`.${IsFocusVisibleClassName} &:focus`]: { outline: `1px solid ${semanticColors.focusBorder}` }\r\n        }\r\n      },\r\n      circle && {\r\n        borderRadius: '100%'\r\n      },\r\n      selected && {\r\n        padding: borderWidth,\r\n        border: `${borderWidth}px solid ${theme.palette.neutralTertiaryAlt}`\r\n      },\r\n      !selected && {\r\n        selectors: {\r\n          ['&:hover, &:active, &:focus']: {\r\n            backgroundColor: semanticColors.bodyBackground, // overwrite white's override\r\n            padding: borderWidth,\r\n            border: `${borderWidth}px solid ${theme.palette.neutralLight}`\r\n          }\r\n        }\r\n      },\r\n      disabled && {\r\n        color: semanticColors.disabledBodyText,\r\n        pointerEvents: 'none',\r\n        opacity: 0.3\r\n      },\r\n      isWhite &&\r\n        !selected && {\r\n          // fake a border for white\r\n          backgroundColor: semanticColors.bodyDivider,\r\n          padding: 1\r\n        }\r\n    ],\r\n    // the <svg> that holds the color\r\n    svg: [\r\n      {\r\n        width: '100%',\r\n        height: '100%'\r\n      },\r\n      circle && {\r\n        borderRadius: '100%'\r\n      }\r\n    ]\r\n  };\r\n};\r\n"]}