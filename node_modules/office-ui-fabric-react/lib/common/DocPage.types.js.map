{"version":3,"file":"DocPage.types.js","sourceRoot":"../src/","sources":["common/DocPage.types.ts"],"names":[],"mappings":"AAoCA,MAAM,CAAN,IAAY,eASX;AATD,WAAY,eAAe;IACzB,sCAAmB,CAAA;IACnB,mDAAgC,CAAA;IAChC,gCAAa,CAAA;IACb,gCAAa,CAAA;IACb,yCAAsB,CAAA;IACtB,gCAAa,CAAA;IACb,gCAAa,CAAA;IACb,gCAAa,CAAA;AACf,CAAC,EATW,eAAe,KAAf,eAAe,QAS1B","sourcesContent":["/** @deprecated No longer used */\nexport interface IComponentStatusProps {\n  /**\n   * Components should be fully usable with the keyboard. For this badge to pass, all of the functionalities of\n   * a component needs to be accessible via the keyboard.\n   */\n  keyboardAccessibilitySupport: ChecklistStatus;\n\n  /**\n   * Components should be appropriately marked with ARIA attributes so users with assistive technologies can\n   * interact with them. For this badge to pass, a component needs to be marked with ARIA attributes to describe\n   * its behavior for assistive technologies (e.g., screen readers). A component can use ARIA roles, states\n   * and properties to inform users of its behavior.\n   */\n  markupSupport: ChecklistStatus;\n\n  /**\n   * Components should display correctly in high contrast mode. For this badge to pass, set your operating\n   * system to use high contrast and then ensure that the components render correctly.\n   */\n  highContrastSupport: ChecklistStatus;\n\n  /**\n   * For localization, components should display correctly in right to left layouts. For this badge to pass,\n   * ensure RTL (right-to-left) layouts render properly in the sample website by enabling it in the settings\n   * (located in the top right corner for LTR layout).\n   */\n  rtlSupport: ChecklistStatus;\n\n  /**\n   * To avoid regressions, make sure components are throughly unit-tested. For this badge to be marked \"good\",\n   * write unit tests that cover all edge cases and scenarios.\n   */\n  testCoverage: ChecklistStatus;\n}\n\nexport enum ChecklistStatus {\n  unknown = 'Unknown',\n  notApplicable = 'Not applicable',\n  pass = 'Pass',\n  fail = 'Fail',\n  none = 'Missing tests',\n  poor = 'Poor',\n  fair = 'Fair',\n  good = 'Good'\n}\n\nexport interface IExample {\n  /** Title of the example */\n  title: string;\n\n  /** Raw source code of the example */\n  code: string;\n\n  /** Working example of the example */\n  view: JSX.Element;\n\n  isScrollable?: boolean;\n\n  /** JS String for codepen of the example */\n  codepenJS?: string;\n}\n\nexport interface IDocPageProps {\n  /** Title that goes into the header */\n  title: string;\n\n  /** Name of the component being documented */\n  componentName: string;\n\n  /** URL of the checked in component, should be somewhere on github.com */\n  componentUrl: string;\n\n  /**\n   * Status of the component; e.g. keyboard accessible\n   * @deprecated No longer used\n   */\n  componentStatus?: IComponentStatusProps;\n\n  /** Knobs that applies to all the examples */\n  exampleKnobs?: JSX.Element;\n\n  /** Array of examples, displayed in the order defined */\n  examples?: IExample[];\n\n  /** @deprecated */\n  implementationExamples?: {\n    /** Title of the example */\n    title: string;\n\n    /** Raw source code of the example */\n    code: string;\n\n    /** Working example of the example */\n    view: JSX.Element;\n  }[];\n\n  /** Properties table(s) as markdown string */\n  propertiesTablesSources?: string[];\n\n  /** Overview of the component as markdown string */\n  overview?: string;\n\n  /** DO's blurb as markdown string */\n  dos?: string;\n\n  /** DON'Ts blurb as markdown string */\n  donts?: string;\n\n  /** Best practice as markdown string */\n  bestPractices?: string;\n\n  /** Feedback section includes link to new issue page and displays Github issues */\n  isFeedbackVisible?: boolean;\n\n  /** Passed through header visibility flag from the demo component page component */\n  isHeaderVisible: boolean;\n\n  /** If true, the component accepts all native props from elements specified in `nativePropsElement` */\n  allowNativeProps?: boolean;\n\n  /** Override component name to use in the native props message */\n  allowNativePropsForComponentName?: string;\n\n  /**\n   * Element(s) whose native props this component accepts (default div).\n   * Only relevant if `allowNativeProps` is true.\n   */\n  nativePropsElement?: string | string[];\n\n  /**\n   * Related link\n   * @deprecated No longer shown on ComponentPage\n   */\n  related?: JSX.Element;\n\n  /** Pass through other sections for ComponentPage */\n  otherSections?: {\n    title: string;\n    section: JSX.Element;\n  }[];\n\n  /**\n   * JSON to populate the api reference tables\n   */\n  jsonDocs?: IPageJson;\n}\n\n/**\n * Used to keep track of where the page will live on the site\n */\nexport type PageKind = 'References' | 'Components';\n\n/**\n * Excerpt token that is part of a type or extends block and may have a hyperlink\n */\nexport interface ILinkToken {\n  text: string;\n  hyperlinkedPage?: string;\n  pageKind?: PageKind;\n}\n\n/**\n * Generic table row\n */\nexport interface ITableRowJson {\n  name: string;\n  typeTokens: ILinkToken[];\n  defaultValue?: string;\n  description: string;\n  deprecated: boolean;\n  deprecatedMessage?: string;\n  kind?: 'Method' | 'Property';\n}\n\n/**\n * Enum table row\n */\nexport type IEnumTableRowJson = Required<Pick<ITableRowJson, 'name' | 'description'>> & {\n  value: string;\n};\n\n/**\n * Api table\n */\nexport interface ITableJson {\n  kind: 'interface' | 'enum' | 'class' | 'typeAlias';\n  name: string;\n  extendsTokens: ILinkToken[];\n  description: string;\n  members: ITableRowJson[] | IEnumTableRowJson[];\n}\n\n/**\n * Structure of the page.json files\n */\nexport interface IPageJson {\n  tables: ITableJson[];\n  name: string;\n}\n"]}