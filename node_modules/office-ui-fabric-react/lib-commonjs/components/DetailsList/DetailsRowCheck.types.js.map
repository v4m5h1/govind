{"version":3,"file":"DetailsRowCheck.types.js","sourceRoot":"../src/","sources":["components/DetailsList/DetailsRowCheck.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { IStyle, ITheme } from '../../Styling';\nimport { IStyleFunctionOrObject, IRenderFunction } from '../../Utilities';\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsRowCheckProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * Theme provided by High-Order Component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Style override\n   */\n  styles?: IStyleFunctionOrObject<IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>;\n\n  /**\n   * Is the check part of the header in a DetailsList\n   */\n  isHeader?: boolean;\n\n  /**\n   * Whether or not this check is selected\n   */\n  selected?: boolean;\n\n  /**\n   * Deprecated, use `selected` instead.\n   * @deprecated Use `selected` instead.\n   */\n  isSelected?: boolean;\n\n  /**\n   * Is any selected - also true for isSelectionModal\n   */\n  anySelected?: boolean;\n\n  /**\n   * Can this checkbox be selectable\n   */\n  canSelect: boolean;\n\n  /**\n   * Is this in compact mode?\n   */\n  compact?: boolean;\n\n  /**\n   * Optional className to attach to the slider root element.\n   */\n  className?: string;\n\n  /**\n   * The classname to be passed down to Check component\n   */\n  checkClassName?: string;\n\n  /**\n   * Whether or not this checkbox is visible\n   */\n  isVisible?: boolean;\n\n  /**\n   * If provided, can be used to render a custom checkbox\n   */\n  onRenderDetailsCheckbox?: IRenderFunction<IDetailsCheckboxProps>;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport type IDetailsRowCheckStyleProps = Required<Pick<IDetailsRowCheckProps, 'theme'>> &\n  Pick<IDetailsRowCheckProps, 'compact' | 'isHeader' | 'selected' | 'anySelected' | 'canSelect' | 'className'> & {\n    /** Is checkbox visible */\n    isVisible?: boolean;\n  };\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsRowCheckStyles {\n  root: IStyle;\n  check: IStyle;\n  isDisabled: IStyle;\n}\n\nexport interface IDetailsCheckboxProps {\n  checked: boolean;\n}\n"]}