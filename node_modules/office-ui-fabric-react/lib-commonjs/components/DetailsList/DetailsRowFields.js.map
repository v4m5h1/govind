{"version":3,"file":"DetailsRowFields.js","sourceRoot":"../src/","sources":["components/DetailsList/DetailsRowFields.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAE/B,6CAAqD;AAErD,yDAA+D;AAE/D,IAAM,WAAW,GAAG,UAAC,IAAS,EAAE,MAAe;IAC7C,IAAI,KAAK,GAAG,IAAI,IAAI,MAAM,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAE7E,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;QACzC,KAAK,GAAG,EAAE,CAAC;KACZ;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF;IAAsC,4CAAqC;IAA3E;;IAoDA,CAAC;IAnDQ,iCAAM,GAAb;QACQ,IAAA,eASQ,EARZ,oBAAO,EACP,sCAAgB,EAChB,oBAAO,EACP,gCAAa,EACb,sBAAyC,EAAzC,kFAAyC,EACzC,cAAI,EACJ,wBAAS,EACT,0CAAkB,CACL;QAEf,OAAO,CACL,6BAAK,SAAS,EAAE,aAAa,CAAC,MAAM,uBAAoB,kBAAkB,EAAC,IAAI,EAAC,cAAc,IAC3F,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,WAAW;YAC/B,IAAM,KAAK,GACT,OAAO,MAAM,CAAC,eAAe,KAAK,WAAW;gBAC3C,CAAC,CAAC,MAAM;gBACR,CAAC,CAAC,MAAM,CAAC,eAAe;oBACtB,cAAc,CAAC,eAAe;oBAC9B,cAAc,CAAC,gBAAgB;oBAC/B,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAE3D,IAAA,oBAA6B,EAA7B,kDAA6B,CAAY;YACjD,IAAM,kBAAkB,GAAG,QAAQ,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAEhH,OAAO,CACL,6BACE,GAAG,EAAE,WAAW,EAChB,IAAI,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,mBACpC,WAAW,GAAG,gBAAgB,GAAG,CAAC,EACjD,SAAS,EAAE,eAAG,CACZ,MAAM,CAAC,SAAS,EAChB,MAAM,CAAC,WAAW,IAAI,aAAa,CAAC,WAAW,EAC/C,MAAM,CAAC,WAAW,IAAI,aAAa,CAAC,WAAW,EAC/C,MAAM,CAAC,UAAU,IAAI,OAAO,IAAI,aAAa,CAAC,sBAAsB,EACpE,OAAO,IAAI,aAAa,CAAC,OAAO,EAChC,aAAa,CAAC,IAAI,EAClB,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,YAAY,CACxE,EACD,KAAK,EAAE,EAAE,KAAK,OAAA,EAAE,uBACE,gBAAgB,yBACb,MAAM,CAAC,GAAG,IAE9B,kBAAkB,CACf,CACP,CAAC;QACJ,CAAC,CAAC,CACE,CACP,CAAC;IACJ,CAAC;IACH,uBAAC;AAAD,CAAC,AApDD,CAAsC,yBAAa,GAoDlD;AApDY,4CAAgB","sourcesContent":["import * as React from 'react';\r\nimport { IColumn } from './DetailsList.types';\r\nimport { BaseComponent, css } from '../../Utilities';\r\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\r\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\r\n\r\nconst getCellText = (item: any, column: IColumn): string => {\r\n  let value = item && column && column.fieldName ? item[column.fieldName] : '';\r\n\r\n  if (value === null || value === undefined) {\r\n    value = '';\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\nexport class DetailsRowFields extends BaseComponent<IDetailsRowFieldsProps> {\r\n  public render(): JSX.Element {\r\n    const {\r\n      columns,\r\n      columnStartIndex,\r\n      shimmer,\r\n      rowClassNames,\r\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\r\n      item,\r\n      itemIndex,\r\n      onRenderItemColumn\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className={rowClassNames.fields} data-automationid=\"DetailsRowFields\" role=\"presentation\">\r\n        {columns.map((column, columnIndex) => {\r\n          const width: string | number =\r\n            typeof column.calculatedWidth === 'undefined'\r\n              ? 'auto'\r\n              : column.calculatedWidth +\r\n                cellStyleProps.cellLeftPadding +\r\n                cellStyleProps.cellRightPadding +\r\n                (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\r\n\r\n          const { onRender = onRenderItemColumn } = column;\r\n          const cellContentsRender = onRender && !shimmer ? onRender(item, itemIndex, column) : getCellText(item, column);\r\n\r\n          return (\r\n            <div\r\n              key={columnIndex}\r\n              role={column.isRowHeader ? 'rowheader' : 'gridcell'}\r\n              aria-colindex={columnIndex + columnStartIndex + 1}\r\n              className={css(\r\n                column.className,\r\n                column.isMultiline && rowClassNames.isMultiline,\r\n                column.isRowHeader && rowClassNames.isRowHeader,\r\n                column.isIconOnly && shimmer && rowClassNames.shimmerIconPlaceholder,\r\n                shimmer && rowClassNames.shimmer,\r\n                rowClassNames.cell,\r\n                column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded\r\n              )}\r\n              style={{ width }}\r\n              data-automationid=\"DetailsRowCell\"\r\n              data-automation-key={column.key}\r\n            >\r\n              {cellContentsRender}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}