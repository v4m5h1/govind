{"version":3,"file":"ShimmerElementsGroup.base.js","sourceRoot":"../src/","sources":["components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.base.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,gDAAuE;AAGvE,kDAAsG;AACtG,0DAAyD;AAEzD,uDAAsD;AAEtD,gEAA+D;AAG/D,IAAM,aAAa,GAAG,8BAAkB,EAAgE,CAAC;AAEzG;;GAEG;AACH;IAA8C,oDAA6C;IAOzF,kCAAY,KAAiC;QAA7C,YACE,kBAAM,KAAK,CAAC,SACb;QAoBO,0BAAoB,GAAG,UAAC,eAAmC,EAAE,SAAkB;YACrF,IAAM,gBAAgB,GAAoB,eAAe,CAAC,CAAC,CAAC,CAC1D,eAAe,CAAC,GAAG,CACjB,UAAC,IAAqB,EAAE,KAAa;gBAC3B,IAAA,gBAAI,EAAE,6CAAe,CAAU;gBACvC,QAAQ,IAAI,CAAC,IAAI,EAAE;oBACjB,KAAK,kCAAkB,CAAC,MAAM;wBAC5B,OAAO,oBAAC,6BAAa,qBAAC,GAAG,EAAE,KAAK,IAAM,YAAY,IAAE,MAAM,EAAE,KAAI,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC;oBACnG,KAAK,kCAAkB,CAAC,GAAG;wBACzB,OAAO,oBAAC,uBAAU,qBAAC,GAAG,EAAE,KAAK,IAAM,YAAY,IAAE,MAAM,EAAE,KAAI,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC;oBAChG,KAAK,kCAAkB,CAAC,IAAI;wBAC1B,OAAO,oBAAC,yBAAW,qBAAC,GAAG,EAAE,KAAK,IAAM,YAAY,IAAE,MAAM,EAAE,KAAI,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC;iBAClG;YACH,CAAC,CACF,CACF,CAAC,CAAC,CAAC,CACF,oBAAC,yBAAW,IAAC,MAAM,EAAE,6CAA6B,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,EAAE,GAAI,CACxG,CAAC;YAEF,OAAO,gBAAgB,CAAC;QAC1B,CAAC,CAAC;QAEM,gBAAU,GAAG,UAAC,IAAqB,EAAE,SAAkB;YACrD,IAAA,6CAAe,CAAgB;YAC/B,IAAA,kCAAa,EAAE,gBAAI,CAAU;YACrC,IAAM,UAAU,GAAuB,IAAI,CAAC,MAAM,CAAC;YACnD,IAAM,GAAG,GAAW,SAAS,IAAI,UAAU,CAAC,CAAC,CAAC,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YAEzE,IAAI,WAAkC,CAAC;YAEvC,IAAI,CAAC,aAAa,IAAI,aAAa,KAAK,QAAQ,EAAE;gBAChD,WAAW,GAAG;oBACZ,iBAAiB,EAAE,CAAG,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAI;oBACvD,cAAc,EAAE,CAAG,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAI;iBACpD,CAAC;aACH;iBAAM,IAAI,aAAa,IAAI,aAAa,KAAK,KAAK,EAAE;gBACnD,WAAW,GAAG;oBACZ,iBAAiB,EAAE,CAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAI;oBACvC,cAAc,EAAE,KAAK;iBACtB,CAAC;aACH;iBAAM,IAAI,aAAa,IAAI,aAAa,KAAK,QAAQ,EAAE;gBACtD,WAAW,GAAG;oBACZ,iBAAiB,EAAE,KAAK;oBACxB,cAAc,EAAE,CAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAI;iBACrC,CAAC;aACH;YAED,IAAI,eAAe,EAAE;gBACnB,QAAQ,IAAI,EAAE;oBACZ,KAAK,kCAAkB,CAAC,MAAM;wBAC5B,OAAO;4BACL,IAAI,uBAAO,WAAW,IAAE,WAAW,EAAE,eAAe,GAAE;4BACtD,GAAG,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE;yBAC/B,CAAC;oBACJ,KAAK,kCAAkB,CAAC,GAAG;wBACzB,OAAO;4BACL,IAAI,uBAAO,WAAW,IAAE,WAAW,EAAE,eAAe,EAAE,eAAe,EAAE,eAAe,GAAE;yBACzF,CAAC;oBACJ,KAAK,kCAAkB,CAAC,IAAI;wBAC1B,OAAO;4BACL,IAAI,uBAAO,WAAW,IAAE,WAAW,EAAE,eAAe,GAAE;4BACtD,aAAa,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE;4BACxC,cAAc,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE;4BACzC,gBAAgB,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE;4BAC3C,iBAAiB,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE;yBAC7C,CAAC;iBACL;aACF;YAED,OAAO;gBACL,IAAI,uBAAO,WAAW,CAAE;aACzB,CAAC;QACJ,CAAC,CAAC;QAEF;;;WAGG;QACK,2BAAqB,GAAG,UAAC,QAA2B;YAC1D,IAAM,cAAc,GAAsB,QAAQ,CAAC,GAAG,CACpD,UAAC,IAAqB;gBACpB,QAAQ,IAAI,CAAC,IAAI,EAAE;oBACjB,KAAK,kCAAkB,CAAC,MAAM;wBAC5B,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;4BAChB,IAAI,CAAC,MAAM,GAAG,6CAA6B,CAAC,MAAM,CAAC;yBACpD;oBACH,KAAK,kCAAkB,CAAC,IAAI;wBAC1B,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;4BAChB,IAAI,CAAC,MAAM,GAAG,6CAA6B,CAAC,IAAI,CAAC;yBAClD;oBACH,KAAK,kCAAkB,CAAC,GAAG;wBACzB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;4BAChB,IAAI,CAAC,MAAM,GAAG,6CAA6B,CAAC,GAAG,CAAC;yBACjD;iBACJ;gBACD,OAAO,IAAI,CAAC;YACd,CAAC,CACF,CAAC;YAEF,IAAM,SAAS,GAAG,cAAc,CAAC,MAAM,CAAC,UAAC,GAAW,EAAE,IAAqB;gBACzE,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YACrE,CAAC,EAAE,CAAC,CAAC,CAAC;YAEN,OAAO,SAAS,CAAC;QACnB,CAAC,CAAC;;IA5HF,CAAC;IAEM,yCAAM,GAAb;QACQ,IAAA,eAA2E,EAAzE,kBAAM,EAAE,gBAAK,EAAE,oCAAe,EAAE,wBAAS,EAAE,sBAAQ,EAAE,gBAAK,CAAgB;QAElF,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,MAAO,EAAE;YACxC,KAAK,EAAE,KAAM;YACb,QAAQ,UAAA;SACT,CAAC,CAAC;QAEH,IAAM,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QAE1G,OAAO;QACL,yCAAyC;QACzC,6BAAK,KAAK,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,IAC5E,IAAI,CAAC,oBAAoB,CAAC,eAAe,EAAE,MAAM,CAAC,CAC/C,CACP,CAAC;IACJ,CAAC;IA1Ba,qCAAY,GAA+B;QACvD,QAAQ,EAAE,KAAK;KAChB,CAAC;IAmIJ,+BAAC;CAAA,AAtID,CAA8C,yBAAa,GAsI1D;AAtIY,4DAAwB","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, classNamesFunction } from '../../../Utilities';\nimport { IShimmerElementsGroupProps, IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles } from './ShimmerElementsGroup.types';\nimport { IRawStyle } from '../../../Styling';\nimport { ShimmerElementType, ShimmerElementsDefaultHeights, IShimmerElement } from '../Shimmer.types';\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\nimport { IShimmerLineStyles } from '../ShimmerLine/ShimmerLine.types';\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\nimport { IShimmerGapStyles } from '../ShimmerGap/ShimmerGap.types';\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\nimport { IShimmerCircleStyles } from '../ShimmerCircle/ShimmerCircle.types';\n\nconst getClassNames = classNamesFunction<IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport class ShimmerElementsGroupBase extends BaseComponent<IShimmerElementsGroupProps, {}> {\n  public static defaultProps: IShimmerElementsGroupProps = {\n    flexWrap: false\n  };\n\n  private _classNames: { [key in keyof IShimmerElementsGroupStyles]: string };\n\n  constructor(props: IShimmerElementsGroupProps) {\n    super(props);\n  }\n\n  public render(): JSX.Element {\n    const { styles, width, shimmerElements, rowHeight, flexWrap, theme } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      flexWrap\n    });\n\n    const height = rowHeight ? rowHeight : this._findMaxElementHeight(shimmerElements ? shimmerElements : []);\n\n    return (\n      // tslint:disable-next-line:jsx-ban-props\n      <div style={{ width: width ? width : 'auto' }} className={this._classNames.root}>\n        {this._getRenderedElements(shimmerElements, height)}\n      </div>\n    );\n  }\n\n  private _getRenderedElements = (shimmerElements?: IShimmerElement[], rowHeight?: number): React.ReactNode => {\n    const renderedElements: React.ReactNode = shimmerElements ? (\n      shimmerElements.map(\n        (elem: IShimmerElement, index: number): JSX.Element => {\n          const { type, ...filteredElem } = elem;\n          switch (elem.type) {\n            case ShimmerElementType.circle:\n              return <ShimmerCircle key={index} {...filteredElem} styles={this._getStyles(elem, rowHeight)} />;\n            case ShimmerElementType.gap:\n              return <ShimmerGap key={index} {...filteredElem} styles={this._getStyles(elem, rowHeight)} />;\n            case ShimmerElementType.line:\n              return <ShimmerLine key={index} {...filteredElem} styles={this._getStyles(elem, rowHeight)} />;\n          }\n        }\n      )\n    ) : (\n      <ShimmerLine height={ShimmerElementsDefaultHeights.line} styles={{ root: [{ borderWidth: '0px' }] }} />\n    );\n\n    return renderedElements;\n  };\n\n  private _getStyles = (elem: IShimmerElement, rowHeight?: number): IShimmerCircleStyles | IShimmerGapStyles | IShimmerLineStyles => {\n    const { backgroundColor } = this.props;\n    const { verticalAlign, type } = elem;\n    const elemHeight: number | undefined = elem.height;\n    const dif: number = rowHeight && elemHeight ? rowHeight - elemHeight : 0;\n\n    let borderStyle: IRawStyle | undefined;\n\n    if (!verticalAlign || verticalAlign === 'center') {\n      borderStyle = {\n        borderBottomWidth: `${dif ? Math.floor(dif / 2) : 0}px`,\n        borderTopWidth: `${dif ? Math.ceil(dif / 2) : 0}px`\n      };\n    } else if (verticalAlign && verticalAlign === 'top') {\n      borderStyle = {\n        borderBottomWidth: `${dif ? dif : 0}px`,\n        borderTopWidth: `0px`\n      };\n    } else if (verticalAlign && verticalAlign === 'bottom') {\n      borderStyle = {\n        borderBottomWidth: `0px`,\n        borderTopWidth: `${dif ? dif : 0}px`\n      };\n    }\n\n    if (backgroundColor) {\n      switch (type) {\n        case ShimmerElementType.circle:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor },\n            svg: { fill: backgroundColor }\n          };\n        case ShimmerElementType.gap:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor, backgroundColor: backgroundColor }\n          };\n        case ShimmerElementType.line:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor },\n            topLeftCorner: { fill: backgroundColor },\n            topRightCorner: { fill: backgroundColor },\n            bottomLeftCorner: { fill: backgroundColor },\n            bottomRightCorner: { fill: backgroundColor }\n          };\n      }\n    }\n\n    return {\n      root: { ...borderStyle }\n    };\n  };\n\n  /**\n   * User should not worry to provide which of the elements is the highest, we do the calculation for him.\n   * Plus if user forgot to specify the height we assign their defaults.\n   */\n  private _findMaxElementHeight = (elements: IShimmerElement[]): number => {\n    const itemsDefaulted: IShimmerElement[] = elements.map(\n      (elem: IShimmerElement): IShimmerElement => {\n        switch (elem.type) {\n          case ShimmerElementType.circle:\n            if (!elem.height) {\n              elem.height = ShimmerElementsDefaultHeights.circle;\n            }\n          case ShimmerElementType.line:\n            if (!elem.height) {\n              elem.height = ShimmerElementsDefaultHeights.line;\n            }\n          case ShimmerElementType.gap:\n            if (!elem.height) {\n              elem.height = ShimmerElementsDefaultHeights.gap;\n            }\n        }\n        return elem;\n      }\n    );\n\n    const rowHeight = itemsDefaulted.reduce((acc: number, next: IShimmerElement): number => {\n      return next.height ? (next.height > acc ? next.height : acc) : acc;\n    }, 0);\n\n    return rowHeight;\n  };\n}\n"]}