{"version":3,"file":"ChoiceGroup.Label.Example.js","sourceRoot":"../src/","sources":["components/ChoiceGroup/examples/ChoiceGroup.Label.Example.tsx"],"names":[],"mappings":";;;IAYA;QAA6C,mDAAkD;QAA/F;YAAA,qEAiDC;YAhDQ,WAAK,GAAkC;gBAC5C,QAAQ,EAAE,EAAE;aACb,CAAC;YAEF,iEAAiE;YACjE,6FAA6F;YACrF,cAAQ,GAAW,iBAAK,CAAC,cAAc,CAAC,CAAC;YAuCzC,eAAS,GAAG,UAAC,EAAqC,EAAE,MAAW;gBACrE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACtB,CAAC,CAAC;;QACJ,CAAC;QAxCQ,wCAAM,GAAb;YACE,OAAO,CACL;gBACE,oBAAC,aAAK,IAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,mBAEhC;gBACR,oBAAC,yBAAW,IACV,kBAAkB,EAAC,GAAG,EACtB,OAAO,EAAE;wBACP;4BACE,GAAG,EAAE,GAAG;4BACR,IAAI,EAAE,UAAU;4BAChB,oBAAoB,EAAE,OAAO;yBACR;wBACvB;4BACE,GAAG,EAAE,GAAG;4BACR,IAAI,EAAE,UAAU;yBACjB;wBACD;4BACE,GAAG,EAAE,GAAG;4BACR,IAAI,EAAE,UAAU;4BAChB,QAAQ,EAAE,IAAI;yBACf;wBACD;4BACE,GAAG,EAAE,GAAG;4BACR,IAAI,EAAE,UAAU;4BAChB,QAAQ,EAAE,IAAI;yBACf;qBACF,EACD,QAAQ,EAAE,IAAI,CAAC,SAAS,EACxB,cAAc,EAAE,IAAI,CAAC,QAAQ,EAC7B,QAAQ,EAAE,IAAI,GACd,CACE,CACP,CAAC;QACJ,CAAC;QAKH,8BAAC;IAAD,CAAC,AAjDD,CAA6C,KAAK,CAAC,SAAS,GAiD3D;IAjDY,0DAAuB","sourcesContent":["import * as React from 'react';\nimport { ChoiceGroup, IChoiceGroupOption } from 'office-ui-fabric-react/lib/ChoiceGroup';\nimport { Label } from 'office-ui-fabric-react/lib/Label';\nimport { getId } from 'office-ui-fabric-react/lib/Utilities';\n\n/**\n * Interface for ChoiceGroupLabelExample state.\n */\nexport interface IChoiceGroupLabelExampleState {\n  imageKey: string;\n}\n\nexport class ChoiceGroupLabelExample extends React.Component<{}, IChoiceGroupLabelExampleState> {\n  public state: IChoiceGroupLabelExampleState = {\n    imageKey: ''\n  };\n\n  // Use getId() to ensure that the label ID is unique on the page.\n  // (It's also okay to use a plain string without getId() and manually ensure its uniqueness.)\n  private _labelId: string = getId('labelElement');\n\n  public render() {\n    return (\n      <div>\n        <Label id={this._labelId} required={true}>\n          Custom label\n        </Label>\n        <ChoiceGroup\n          defaultSelectedKey=\"B\"\n          options={[\n            {\n              key: 'A',\n              text: 'Option A',\n              'data-automation-id': 'auto1'\n            } as IChoiceGroupOption,\n            {\n              key: 'B',\n              text: 'Option B'\n            },\n            {\n              key: 'C',\n              text: 'Option C',\n              disabled: true\n            },\n            {\n              key: 'D',\n              text: 'Option D',\n              disabled: true\n            }\n          ]}\n          onChange={this._onChange}\n          ariaLabelledBy={this._labelId}\n          required={true}\n        />\n      </div>\n    );\n  }\n\n  private _onChange = (ev: React.FormEvent<HTMLInputElement>, option: any): void => {\n    console.dir(option);\n  };\n}\n"]}