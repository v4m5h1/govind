import { IsFocusVisibleClassName } from '../../Utilities';
export var getStyles = function (props) {
    var theme = props.theme, disabled = props.disabled, selected = props.selected, circle = props.circle, isWhite = props.isWhite, height = props.height, width = props.width, borderWidth = props.borderWidth;
    var semanticColors = theme.semanticColors;
    return {
        // this is a button that wraps the color
        colorCell: [
            {
                backgroundColor: semanticColors.bodyBackground,
                padding: 0,
                position: 'relative',
                boxSizing: 'border-box',
                display: 'inline-block',
                cursor: 'pointer',
                userSelect: 'none',
                height: height,
                width: width,
                selectors: (_a = {},
                    // remove default focus border
                    _a["." + IsFocusVisibleClassName + " &:focus::after"] = { display: 'none' },
                    // add a custom focus border
                    _a["." + IsFocusVisibleClassName + " &:focus"] = { outline: "1px solid " + semanticColors.focusBorder },
                    _a)
            },
            circle && {
                borderRadius: '100%'
            },
            selected && {
                padding: borderWidth,
                border: borderWidth + "px solid " + theme.palette.neutralTertiaryAlt
            },
            !selected && {
                selectors: (_b = {},
                    _b['&:hover, &:active, &:focus'] = {
                        backgroundColor: semanticColors.bodyBackground,
                        padding: borderWidth,
                        border: borderWidth + "px solid " + theme.palette.neutralLight
                    },
                    _b)
            },
            disabled && {
                color: semanticColors.disabledBodyText,
                pointerEvents: 'none',
                opacity: 0.3
            },
            isWhite &&
                !selected && {
                // fake a border for white
                backgroundColor: semanticColors.bodyDivider,
                padding: 1
            }
        ],
        // the <svg> that holds the color
        svg: [
            {
                width: '100%',
                height: '100%'
            },
            circle && {
                borderRadius: '100%'
            }
        ]
    };
    var _a, _b;
};
//# sourceMappingURL=ColorPickerGridCell.styles.js.map