{"version":3,"file":"List.Basic.Example.js","sourceRoot":"../src/","sources":["components/List/examples/List.Basic.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,kEAA8D;AAC9D,kEAAqF;AACrF,kEAAiE;AACjE,0DAAmE;AACnE,wDAAuD;AACvD,wDAAuD;AACvD,kDAAoD;AAapD;IAAsC,4CAA+D;IACnG,0BAAY,KAA6B;QAAzC,YACE,kBAAM,KAAK,CAAC,SAQb;QANC,KAAI,CAAC,gBAAgB,GAAG,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QAEzD,KAAI,CAAC,KAAK,GAAG;YACX,UAAU,EAAE,EAAE;YACd,KAAK,EAAE,KAAK,CAAC,KAAK;SACnB,CAAC;;IACJ,CAAC;IAEM,iCAAM,GAAb;QACU,IAAA,gCAAoB,CAAgB;QACpC,IAAA,qBAAU,EAAV,+BAAU,CAAgB;QAClC,IAAM,eAAe,GAAG,KAAK,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAK,KAAK,CAAC,MAAM,YAAO,aAAa,CAAC,MAAM,YAAS,CAAC;QAE3H,OAAO,CACL,oBAAC,qBAAS,IAAC,SAAS,EAAE,8BAAkB,CAAC,QAAQ;YAC/C,oBAAC,qBAAS,IAAC,KAAK,EAAE,gBAAgB,GAAG,eAAe,EAAE,QAAQ,EAAE,IAAI,CAAC,gBAAgB,GAAI;YACzF,oBAAC,WAAI,IAAC,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,CAAC,aAAa,GAAI,CAC9C,CACb,CAAC;IACJ,CAAC;IAEO,2CAAgB,GAAxB,UAAyB,CAAM,EAAE,IAAY;QACnC,IAAA,wBAAK,CAAgB;QAE7B,IAAI,CAAC,QAAQ,CAAC;YACZ,UAAU,EAAE,IAAI;YAChB,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,EAAxD,CAAwD,CAAC,CAAC,CAAC,CAAC,KAAK;SACrG,CAAC,CAAC;IACL,CAAC;IAEO,wCAAa,GAArB,UAAsB,IAAkB,EAAE,KAAyB;QACjE,OAAO,CACL,6BAAK,SAAS,EAAE,MAAM,CAAC,QAAQ,uBAAqB,IAAI;YACtD,oBAAC,aAAK,IAAC,SAAS,EAAE,MAAM,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,gBAAQ,CAAC,KAAK,GAAI;YAC5G,6BAAK,SAAS,EAAE,MAAM,CAAC,WAAW;gBAChC,6BAAK,SAAS,EAAE,MAAM,CAAC,QAAQ,IAAG,IAAI,CAAC,IAAI,CAAO;gBAClD,6BAAK,SAAS,EAAE,MAAM,CAAC,SAAS,IAAG,UAAQ,KAAO,CAAO;gBACzD,iCAAM,IAAI,CAAC,WAAW,CAAO,CACzB;YACN,oBAAC,WAAI,IAAC,SAAS,EAAE,MAAM,CAAC,OAAO,EAAE,QAAQ,EAAE,kBAAM,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,cAAc,GAAI,CACpF,CACP,CAAC;IACJ,CAAC;IACH,uBAAC;AAAD,CAAC,AA/CD,CAAsC,KAAK,CAAC,SAAS,GA+CpD;AA/CY,4CAAgB","sourcesContent":["import * as React from 'react';\nimport { getRTL } from 'office-ui-fabric-react/lib/Utilities';\nimport { FocusZone, FocusZoneDirection } from 'office-ui-fabric-react/lib/FocusZone';\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\nimport { Image, ImageFit } from 'office-ui-fabric-react/lib/Image';\nimport { Icon } from 'office-ui-fabric-react/lib/Icon';\nimport { List } from 'office-ui-fabric-react/lib/List';\nimport * as styles from './List.Basic.Example.scss';\n\nexport type IExampleItem = { name: string; thumbnail: string; description: string };\n\nexport interface IListBasicExampleProps {\n  items: IExampleItem[];\n}\n\nexport interface IListBasicExampleState {\n  filterText?: string;\n  items?: IExampleItem[];\n}\n\nexport class ListBasicExample extends React.Component<IListBasicExampleProps, IListBasicExampleState> {\n  constructor(props: IListBasicExampleProps) {\n    super(props);\n\n    this._onFilterChanged = this._onFilterChanged.bind(this);\n\n    this.state = {\n      filterText: '',\n      items: props.items\n    };\n  }\n\n  public render(): JSX.Element {\n    const { items: originalItems } = this.props;\n    const { items = [] } = this.state;\n    const resultCountText = items.length === originalItems.length ? '' : ` (${items.length} of ${originalItems.length} shown)`;\n\n    return (\n      <FocusZone direction={FocusZoneDirection.vertical}>\n        <TextField label={'Filter by name' + resultCountText} onChange={this._onFilterChanged} />\n        <List items={items} onRenderCell={this._onRenderCell} />\n      </FocusZone>\n    );\n  }\n\n  private _onFilterChanged(_: any, text: string): void {\n    const { items } = this.props;\n\n    this.setState({\n      filterText: text,\n      items: text ? items.filter(item => item.name.toLowerCase().indexOf(text.toLowerCase()) >= 0) : items\n    });\n  }\n\n  private _onRenderCell(item: IExampleItem, index: number | undefined): JSX.Element {\n    return (\n      <div className={styles.itemCell} data-is-focusable={true}>\n        <Image className={styles.itemImage} src={item.thumbnail} width={50} height={50} imageFit={ImageFit.cover} />\n        <div className={styles.itemContent}>\n          <div className={styles.itemName}>{item.name}</div>\n          <div className={styles.itemIndex}>{`Item ${index}`}</div>\n          <div>{item.description}</div>\n        </div>\n        <Icon className={styles.chevron} iconName={getRTL() ? 'ChevronLeft' : 'ChevronRight'} />\n      </div>\n    );\n  }\n}\n"]}