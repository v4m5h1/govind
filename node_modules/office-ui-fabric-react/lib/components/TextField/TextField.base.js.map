{"version":3,"file":"TextField.base.js","sourceRoot":"../src/","sources":["components/TextField/TextField.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { Label, ILabelStyleProps, ILabelStyles } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  DelayedRender,\n  IStyleFunctionOrObject,\n  classNamesFunction,\n  createRef,\n  getId,\n  getNativeProps,\n  initializeComponentRef,\n  inputProperties,\n  textAreaProperties,\n  warnDeprecations,\n  warnMutuallyExclusive\n} from '../../Utilities';\nimport { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n\nexport interface ITextFieldState {\n  value: string;\n\n  /** Is true when the control has focus. */\n  isFocused: boolean;\n\n  /**\n   * The validation error message.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  errorMessage: string | JSX.Element;\n}\n\nconst DEFAULT_STATE_VALUE = '';\n\nexport class TextFieldBase extends React.Component<ITextFieldProps, ITextFieldState> implements ITextField {\n  public static defaultProps: ITextFieldProps = {\n    multiline: false,\n    resizable: true,\n    autoAdjustHeight: false,\n    underlined: false,\n    borderless: false,\n    onChange: () => {\n      /* noop */\n    },\n    onBeforeChange: () => {\n      /* noop */\n    },\n    onNotifyValidationResult: () => {\n      /* noop */\n    },\n    onGetErrorMessage: () => undefined,\n    deferredValidationTime: 200,\n    errorMessage: '',\n    validateOnFocusIn: false,\n    validateOnFocusOut: false,\n    validateOnLoad: true\n  };\n\n  private _id: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _isMounted: boolean;\n  private _lastValidation: number;\n  private _latestValue: string | undefined;\n  private _latestValidateValue: string | undefined;\n  private _textElement = createRef<HTMLTextAreaElement | HTMLInputElement | null>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n\n  /**\n   * If true, the text field is changing between single- and multi-line, so we'll need to reset\n   * focus after the change completes.\n   */\n  private _shouldResetFocusAfterRender: boolean | undefined;\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  private _selectionBeforeInputTypeChange: [number | null, number | null] | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this._async = new Async(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('TextField', props, {\n        iconClass: 'iconProps',\n        addonString: 'prefix',\n        onRenderAddon: 'onRenderPrefix',\n        onChanged: 'onChange'\n      });\n\n      warnMutuallyExclusive('TextField', props, {\n        value: 'defaultValue'\n      });\n    }\n\n    this._id = props.id || getId('TextField');\n    this._descriptionId = getId('TextFieldDescription');\n    this._labelId = getId('TextFieldLabel');\n\n    if (props.value !== undefined) {\n      this._latestValue = props.value;\n    } else if (props.defaultValue !== undefined) {\n      this._latestValue = props.defaultValue;\n    } else {\n      this._latestValue = DEFAULT_STATE_VALUE;\n    }\n\n    this.state = {\n      value: this._latestValue,\n      isFocused: false,\n      errorMessage: ''\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return this.state.value;\n  }\n\n  public componentDidMount(): void {\n    this._isMounted = true;\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.state.value);\n    }\n  }\n\n  public componentWillReceiveProps(newProps: ITextFieldProps): void {\n    const { onBeforeChange } = this.props;\n\n    // If old value prop was undefined, then component is controlled and we should\n    //    respect new undefined value and update state accordingly.\n    if (newProps.value !== this.state.value && (newProps.value !== undefined || this.props.value !== undefined)) {\n      if (onBeforeChange) {\n        onBeforeChange(newProps.value);\n      }\n\n      this._id = newProps.id || this._id;\n      this._setValue(newProps.value);\n\n      if (_shouldValidateAllChanges(newProps)) {\n        this._delayedValidate(newProps.value);\n      }\n    }\n\n    // If component is not currently controlled and defaultValue changes, set value to new defaultValue.\n    if (newProps.defaultValue !== this.props.defaultValue && newProps.value === undefined) {\n      this._setValue(newProps.defaultValue);\n    }\n\n    // Text field is changing between single- and multi-line. After the change is complete,\n    // we'll need to reset focus and selection/cursor.\n    if (!!newProps.multiline !== !!this.props.multiline && this.state.isFocused) {\n      this._shouldResetFocusAfterRender = true;\n      this._selectionBeforeInputTypeChange = [this.selectionStart, this.selectionEnd];\n    }\n  }\n\n  public componentDidUpdate(): void {\n    if (this._shouldResetFocusAfterRender) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this._shouldResetFocusAfterRender = false;\n      this.focus();\n      if (this._selectionBeforeInputTypeChange) {\n        const [start, end] = this._selectionBeforeInputTypeChange;\n        if (start !== null && end !== null) {\n          this.setSelectionRange(start, end);\n        }\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._isMounted = false;\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      iconClass,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      addonString, // @deprecated\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      onRenderAddon = this._onRenderAddon, // @deprecated\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription\n    } = this.props;\n    const { isFocused } = this.state;\n    const errorMessage = this._errorMessage;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: !!errorMessage,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      iconClass,\n      inputClassName,\n      autoAdjustHeight\n    });\n\n    return (\n      <div className={this._classNames.root}>\n        <div className={this._classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={this._classNames.fieldGroup}>\n            {(addonString !== undefined || this.props.onRenderAddon) && (\n              <div className={this._classNames.prefix}>{onRenderAddon(this.props, this._onRenderAddon)}</div>\n            )}\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={this._classNames.prefix}>{onRenderPrefix(this.props, this._onRenderPrefix)}</div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {(iconClass || iconProps) && <Icon className={this._classNames.icon} {...iconProps} />}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={this._classNames.suffix}>{onRenderSuffix(this.props, this._onRenderSuffix)}</div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>\n                  <p className={this._classNames.errorMessage}>\n                    <span data-automation-id=\"error-message\">{errorMessage}</span>\n                  </p>\n                </DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _setValue(value?: string) {\n    this._latestValue = value;\n    this.setState(\n      {\n        value: value || DEFAULT_STATE_VALUE,\n        errorMessage: ''\n      } as ITextFieldState,\n      () => {\n        this._adjustInputHeight();\n      }\n    );\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true });\n    if (this.props.validateOnFocusIn) {\n      this._validate(this.state.value);\n    }\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false });\n    if (this.props.validateOnFocusOut) {\n      this._validate(this.state.value);\n    }\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  // @deprecated\n  private _onRenderAddon(props: ITextFieldProps): JSX.Element {\n    const { addonString } = props;\n    return <span style={{ paddingBottom: '1px' }}>{addonString}</span>;\n  }\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  private get _errorMessage(): string | JSX.Element | undefined {\n    let { errorMessage } = this.state;\n    if (!errorMessage && this.props.errorMessage) {\n      errorMessage = this.props.errorMessage;\n    }\n\n    return errorMessage;\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const textAreaProps = getNativeProps(this.props, textAreaProperties, ['defaultValue']);\n\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement}\n        value={this.state.value}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={!!this._errorMessage}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): React.ReactElement<React.HTMLAttributes<HTMLInputElement>> {\n    const inputProps = getNativeProps<React.HTMLAttributes<HTMLInputElement>>(this.props, inputProperties, ['defaultValue']);\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <input\n        type={'text'}\n        id={this._id}\n        aria-labelledby={ariaLabelledBy}\n        {...inputProps}\n        ref={this._textElement}\n        value={this.state.value}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-label={this.props.ariaLabel}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={!!this._errorMessage}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    event.persist();\n    const element: HTMLInputElement = event.target as HTMLInputElement;\n    const value: string = element.value;\n\n    // Avoid doing unnecessary work when the value has not changed.\n    if (value === this._latestValue) {\n      return;\n    }\n    this._latestValue = value;\n\n    this.setState({ value: value } as ITextFieldState, () => {\n      this._adjustInputHeight();\n\n      if (this.props.onChange) {\n        this.props.onChange(event, value);\n      }\n\n      if (this.props.onChanged) {\n        this.props.onChanged(value);\n      }\n    });\n\n    if (_shouldValidateAllChanges(this.props)) {\n      this._delayedValidate(value);\n    }\n\n    if (this.props.onBeforeChange) {\n      this.props.onBeforeChange(value);\n    }\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case of _validate called multi-times during executing validate logic with promise return.\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage as (value: string) => string | PromiseLike<string> | undefined;\n    const result = onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result } as ITextFieldState);\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (this._isMounted && currentValidation === this._lastValidation) {\n            this.setState({ errorMessage } as ITextFieldState);\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (this._isMounted && value === this.state.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n"]}