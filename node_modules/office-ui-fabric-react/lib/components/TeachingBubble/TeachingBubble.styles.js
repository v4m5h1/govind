import { AnimationVariables, DefaultFontStyles, FontSizes, FontWeights, getGlobalClassNames, keyframes } from '../../Styling';
var globalClassNames = {
    root: 'ms-TeachingBubble',
    body: 'ms-TeachingBubble-body',
    bodyContent: 'ms-TeachingBubble-bodycontent',
    closeButton: 'ms-TeachingBubble-closebutton',
    content: 'ms-TeachingBubble-content',
    footer: 'ms-TeachingBubble-footer',
    header: 'ms-TeachingBubble-header',
    headerIsCondensed: 'ms-TeachingBubble-header--condensed',
    headerIsSmall: 'ms-TeachingBubble-header--small',
    headerIsLarge: 'ms-TeachingBubble-header--large',
    headline: 'ms-TeachingBubble-headline',
    image: 'ms-TeachingBubble-image',
    primaryButton: 'ms-TeachingBubble-primaryButton',
    secondaryButton: 'ms-TeachingBubble-secondaryButton',
    subText: 'ms-TeachingBubble-subText',
    // TODO: Button global class name usage should be converted to a styles function once
    //        Button supports JS styling, which means these button names can be removed.
    button: 'ms-Button',
    buttonLabel: 'ms-Button-label'
};
var opacityFadeIn = keyframes({
    '0%': {
        opacity: 0,
        animationTimingFunction: AnimationVariables.easeFunction1,
        transform: 'scale3d(.90,.90,.90)'
    },
    '100%': {
        opacity: 1,
        transform: 'scale3d(1,1,1)'
    }
});
var rootStyle = function (isWide) {
    return [
        {
            display: 'block',
            maxWidth: 364,
            border: 0,
            outline: 'transparent',
            boxShadow: 'none !important',
            width: 'calc(100% + 1px)',
            animationName: "" + opacityFadeIn,
            animationDuration: '300ms',
            animationTimingFunction: 'linear',
            animationFillMode: 'both'
        },
        isWide && {
            maxWidth: '456px'
        }
    ];
};
var headerStyle = function (classNames, hasCondensedHeadline, hasSmallHeadline) {
    if (hasCondensedHeadline) {
        return [classNames.headerIsCondensed];
    }
    if (hasSmallHeadline) {
        return [
            classNames.headerIsSmall,
            {
                selectors: {
                    ':not(:last-child)': {
                        marginBottom: '14px'
                    }
                }
            }
        ];
    }
    // Large headline is default
    return [
        classNames.headerIsLarge,
        {
            selectors: {
                ':not(:last-child)': {
                    marginBottom: '14px'
                }
            }
        }
    ];
};
export var getStyles = function (props) {
    var calloutClassName = props.calloutClassName, hasCondensedHeadline = props.hasCondensedHeadline, hasSmallHeadline = props.hasSmallHeadline, isWide = props.isWide, primaryButtonClassName = props.primaryButtonClassName, secondaryButtonClassName = props.secondaryButtonClassName, theme = props.theme;
    var hasLargeHeadline = !hasCondensedHeadline && !hasSmallHeadline;
    var palette = theme.palette;
    var classNames = getGlobalClassNames(globalClassNames, theme);
    return {
        root: [classNames.root, theme.fonts.medium, calloutClassName],
        body: [
            classNames.body,
            {
                selectors: {
                    ':not(:last-child)': {
                        marginBottom: '20px'
                    }
                }
            }
        ],
        bodyContent: [
            classNames.bodyContent,
            {
                padding: '20px'
            },
            isWide && {
                maxWidth: '302px'
            }
        ],
        closeButton: [
            classNames.closeButton,
            {
                position: 'absolute',
                right: 0,
                top: 0,
                color: palette.white,
                fontSize: FontSizes.small,
                selectors: {
                    ':hover': {
                        background: 'transparent'
                    }
                }
            }
        ],
        content: [
            classNames.content
        ].concat(rootStyle(isWide), [
            isWide && {
                display: 'flex'
            }
        ]),
        footer: [
            classNames.footer,
            {
                display: 'flex',
                alignItems: 'center',
                color: palette.white,
                selectors: {
                    '> *:not(:first-child)': {
                        marginLeft: '20px'
                    }
                }
            }
        ],
        header: [
            classNames.header
        ].concat(headerStyle(classNames, hasCondensedHeadline, hasSmallHeadline), [
            (hasCondensedHeadline || hasSmallHeadline) && [
                DefaultFontStyles.medium,
                {
                    marginRight: '10px',
                    fontWeight: FontWeights.semibold
                }
            ]
        ]),
        headline: [
            classNames.headline,
            {
                margin: 0,
                color: palette.white
            },
            hasLargeHeadline && [
                DefaultFontStyles.xxLarge,
                {
                    fontWeight: FontWeights.light
                }
            ]
        ],
        imageContent: [
            classNames.header,
            classNames.image,
            isWide && {
                display: 'flex',
                alignItems: 'center',
                paddingLeft: '20px',
                maxWidth: '154px'
            }
        ],
        primaryButton: [
            classNames.primaryButton,
            primaryButtonClassName,
            {
                backgroundColor: palette.white,
                borderColor: palette.white,
                whiteSpace: 'nowrap',
                selectors: (_a = {},
                    // TODO: global class name usage should be converted to a button styles function once Button supports JS styling
                    _a["." + classNames.buttonLabel] = [
                        DefaultFontStyles.medium,
                        {
                            color: palette.themePrimary
                        }
                    ],
                    _a[':hover'] = {
                        backgroundColor: palette.themeLighter,
                        borderColor: palette.themeLighter
                    },
                    _a[':focus'] = {
                        backgroundColor: palette.themeLighter,
                        borderColor: palette.white
                    },
                    _a[':active'] = {
                        backgroundColor: palette.white,
                        borderColor: palette.white
                    },
                    _a)
            }
        ],
        secondaryButton: [
            classNames.secondaryButton,
            secondaryButtonClassName,
            {
                backgroundColor: palette.themePrimary,
                borderColor: palette.white,
                whiteSpace: 'nowrap',
                selectors: (_b = {},
                    // TODO: global class name usage should be converted to a button styles function once Button supports JS styling
                    _b["." + classNames.buttonLabel] = [
                        DefaultFontStyles.medium,
                        {
                            color: palette.white
                        }
                    ],
                    _b['&:hover, &:focus'] = {
                        backgroundColor: palette.themeDarkAlt,
                        borderColor: palette.white
                    },
                    _b[':active'] = {
                        backgroundColor: palette.themePrimary,
                        borderColor: palette.white
                    },
                    _b)
            }
        ],
        subText: [
            classNames.subText,
            {
                margin: 0,
                fontSize: FontSizes.medium,
                color: palette.white,
                fontWeight: FontWeights.semilight
            }
        ],
        subComponentStyles: {
            callout: {
                root: rootStyle(isWide).concat([theme.fonts.medium]),
                beak: [
                    {
                        background: palette.themePrimary
                    }
                ],
                calloutMain: [
                    {
                        background: palette.themePrimary
                    }
                ]
            }
        }
    };
    var _a, _b;
};
//# sourceMappingURL=TeachingBubble.styles.js.map