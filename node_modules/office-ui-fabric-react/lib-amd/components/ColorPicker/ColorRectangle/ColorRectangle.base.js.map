{"version":3,"file":"ColorRectangle.base.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorRectangle/ColorRectangle.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, classNamesFunction } from '../../../Utilities';\nimport { IColor } from '../../../utilities/color/interfaces';\nimport { MAX_COLOR_SATURATION, MAX_COLOR_VALUE } from '../../../utilities/color/consts';\nimport { getFullColorString } from '../../../utilities/color/getFullColorString';\nimport { updateSV } from '../../../utilities/color/updateSV';\nimport { clamp } from '../../../utilities/color/clamp';\nimport { IColorRectangleProps, IColorRectangleStyleProps, IColorRectangleStyles, IColorRectangle } from './ColorRectangle.types';\n\nconst getClassNames = classNamesFunction<IColorRectangleStyleProps, IColorRectangleStyles>();\n\nexport interface IColorRectangleState {\n  color: IColor;\n}\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorRectangleBase extends BaseComponent<IColorRectangleProps, IColorRectangleState> implements IColorRectangle {\n  public static defaultProps = {\n    minSize: 220\n  };\n\n  private _root = React.createRef<HTMLDivElement>();\n\n  constructor(props: IColorRectangleProps) {\n    super(props);\n\n    this._warnDeprecations({\n      onSVChanged: 'onChange'\n    });\n\n    const { color } = this.props;\n\n    this.state = {\n      color: color\n    };\n  }\n\n  public get color(): IColor {\n    return this.state.color;\n  }\n\n  public componentWillReceiveProps(newProps: IColorRectangleProps): void {\n    const { color } = newProps;\n\n    this.setState({\n      color: color\n    });\n  }\n\n  public render(): JSX.Element {\n    const { minSize, theme, className, styles } = this.props;\n    const { color } = this.state;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className\n    });\n\n    return (\n      <div\n        ref={this._root}\n        className={classNames.root}\n        style={{ minWidth: minSize, minHeight: minSize, backgroundColor: getFullColorString(color) }}\n        onMouseDown={this._onMouseDown}\n      >\n        <div className={classNames.light} />\n        <div className={classNames.dark} />\n        <div\n          className={classNames.thumb}\n          style={{ left: color!.s + '%', top: MAX_COLOR_VALUE - color!.v + '%', backgroundColor: color!.str }}\n        />\n      </div>\n    );\n  }\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._events.on(window, 'mousemove', this._onMouseMove, true);\n    this._events.on(window, 'mouseup', this._disableEvents, true);\n\n    this._onMouseMove(ev);\n  };\n\n  private _onMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { color, onSVChanged, onChange } = this.props;\n\n    if (!this._root.current) {\n      return;\n    }\n\n    // If the primary button (1) isn't pressed, the user is no longer dragging, so turn off the\n    // event handlers and exit. (this may only be relevant while debugging)\n    // tslint:disable-next-line:no-bitwise\n    if (!(ev.buttons & 1)) {\n      this._disableEvents();\n      return;\n    }\n\n    const newColor = _getNewColor(ev, color, this._root.current);\n    if (newColor) {\n      this.setState({\n        color: newColor\n      });\n\n      if (onChange) {\n        onChange(ev, newColor);\n      }\n\n      if (onSVChanged) {\n        onSVChanged(newColor.s, newColor.v);\n      }\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _disableEvents = (): void => {\n    this._events.off();\n  };\n}\n\n/**\n * Exported for testing only.\n * @internal\n */\nexport function _getNewColor(ev: React.MouseEvent<HTMLElement>, prevColor: IColor, root: HTMLElement): IColor | undefined {\n  const rectSize = root.getBoundingClientRect();\n\n  const sPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n  const vPercentage = (ev.clientY - rectSize.top) / rectSize.height;\n\n  return updateSV(\n    prevColor,\n    clamp(sPercentage * MAX_COLOR_SATURATION, MAX_COLOR_SATURATION),\n    clamp(MAX_COLOR_VALUE - vPercentage * MAX_COLOR_VALUE, MAX_COLOR_VALUE)\n  );\n}\n"]}