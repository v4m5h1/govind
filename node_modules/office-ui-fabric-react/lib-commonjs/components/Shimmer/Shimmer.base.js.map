{"version":3,"file":"Shimmer.base.js","sourceRoot":"../src/","sources":["components/Shimmer/Shimmer.base.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,6CAAkH;AAElH,oFAAmF;AASnF,IAAM,6BAA6B,GAAG,GAAG,CAAC,CAAC,QAAQ;AAEnD,IAAM,aAAa,GAAG,8BAAkB,EAAsC,CAAC;AAE/E;;GAEG;AACH;IAAiC,uCAA2C;IAQ1E,qBAAY,KAAoB;QAAhC,YACE,kBAAM,KAAK,CAAC,SAKb;QAHC,KAAI,CAAC,KAAK,GAAG;YACX,aAAa,EAAE,KAAK,CAAC,YAAY;SAClC,CAAC;;IACJ,CAAC;IAEM,+CAAyB,GAAhC,UAAiC,SAAwB;QAAzD,iBAmBC;QAlBS,IAAA,qCAAY,CAAe;QAEnC,IAAI,IAAI,CAAC,cAAc,KAAK,SAAS,EAAE;YACrC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAC9C,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;SACjC;QACD,IAAI,YAAY,EAAE;YAChB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;gBAC3C,KAAI,CAAC,QAAQ,CAAC;oBACZ,aAAa,EAAE,YAAY;iBAC5B,CAAC,CAAC;gBACH,KAAI,CAAC,cAAc,GAAG,SAAS,CAAC;YAClC,CAAC,EAAE,6BAA6B,CAAC,CAAC;SACnC;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC;gBACZ,aAAa,EAAE,YAAY;aAC5B,CAAC,CAAC;SACJ;IACH,CAAC;IAEM,4BAAM,GAAb;QACQ,IAAA,eAWQ,EAVZ,kBAAM,EACN,oCAAe,EACf,sBAAQ,EACR,8BAAY,EACZ,gBAAK,EACL,wBAAS,EACT,4CAAmB,EACnB,gBAAK,EACL,wBAAS,EACT,gCAAa,CACA;QAEP,IAAA,wCAAa,CAAgB;QAErC,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,MAAO,EAAE;YACxC,KAAK,EAAE,KAAM;YACb,YAAY,cAAA;YACZ,SAAS,WAAA;YACT,2BAA2B,EAAE,6BAA6B;YAC1D,YAAY,EAAE,aAAa,IAAI,aAAa,CAAC,OAAO;YACpD,gBAAgB,EAAE,aAAa,IAAI,aAAa,CAAC,WAAW;SAC7D,CAAC,CAAC;QAEH,IAAM,QAAQ,GAAG,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,yBAAa,CAAC,CAAC;QAE3D,OAAO,CACL,gDAAS,QAAQ,IAAE,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;YAChD,CAAC,aAAa,IAAI,CACjB,6BAAK,KAAK,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,cAAc,IACtF,mBAAmB,CAAC,CAAC,CAAC,CACrB,mBAAmB,CACpB,CAAC,CAAC,CAAC,CACF,oBAAC,2CAAoB,IAAC,eAAe,EAAE,eAAe,EAAE,eAAe,EAAE,aAAa,IAAI,aAAa,CAAC,UAAU,GAAI,CACvH,CACG,CACP;YACA,QAAQ,IAAI,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,WAAW,IAAG,QAAQ,CAAO;YAC1E,SAAS,IAAI,CAAC,YAAY,IAAI,CAC7B,6BAAK,IAAI,EAAC,QAAQ,eAAW,QAAQ;gBACnC,oBAAC,yBAAa;oBACZ,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,gBAAgB,IAAG,SAAS,CAAO,CACtD,CACZ,CACP,CACG,CACP,CAAC;IACJ,CAAC;IApFa,wBAAY,GAAkB;QAC1C,YAAY,EAAE,KAAK;KACpB,CAAC;IAmFJ,kBAAC;CAAA,AAtFD,CAAiC,yBAAa,GAsF7C;AAtFY,kCAAW","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nimport { IShimmerProps, IShimmerStyleProps, IShimmerStyles } from './Shimmer.types';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\n\nexport interface IShimmerState {\n  /**\n   * Flag for knowing when to remove the shimmerWrapper from the DOM.\n   */\n  contentLoaded?: boolean;\n}\n\nconst TRANSITION_ANIMATION_INTERVAL = 200; /* ms */\n\nconst getClassNames = classNamesFunction<IShimmerStyleProps, IShimmerStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport class ShimmerBase extends BaseComponent<IShimmerProps, IShimmerState> {\n  public static defaultProps: IShimmerProps = {\n    isDataLoaded: false\n  };\n\n  private _classNames: { [key in keyof IShimmerStyles]: string };\n  private _lastTimeoutId: number | undefined;\n\n  constructor(props: IShimmerProps) {\n    super(props);\n\n    this.state = {\n      contentLoaded: props.isDataLoaded\n    };\n  }\n\n  public componentWillReceiveProps(nextProps: IShimmerProps): void {\n    const { isDataLoaded } = nextProps;\n\n    if (this._lastTimeoutId !== undefined) {\n      this._async.clearTimeout(this._lastTimeoutId);\n      this._lastTimeoutId = undefined;\n    }\n    if (isDataLoaded) {\n      this._lastTimeoutId = this._async.setTimeout(() => {\n        this.setState({\n          contentLoaded: isDataLoaded\n        });\n        this._lastTimeoutId = undefined;\n      }, TRANSITION_ANIMATION_INTERVAL);\n    } else {\n      this.setState({\n        contentLoaded: isDataLoaded\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      styles,\n      shimmerElements,\n      children,\n      isDataLoaded,\n      width,\n      className,\n      customElementsGroup,\n      theme,\n      ariaLabel,\n      shimmerColors\n    } = this.props;\n\n    const { contentLoaded } = this.state;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      isDataLoaded,\n      className,\n      transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\n      shimmerColor: shimmerColors && shimmerColors.shimmer,\n      shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave\n    });\n\n    const divProps = getNativeProps(this.props, divProperties);\n\n    return (\n      <div {...divProps} className={this._classNames.root}>\n        {!contentLoaded && (\n          <div style={{ width: width ? width : '100%' }} className={this._classNames.shimmerWrapper}>\n            {customElementsGroup ? (\n              customElementsGroup\n            ) : (\n              <ShimmerElementsGroup shimmerElements={shimmerElements} backgroundColor={shimmerColors && shimmerColors.background} />\n            )}\n          </div>\n        )}\n        {children && <div className={this._classNames.dataWrapper}>{children}</div>}\n        {ariaLabel && !isDataLoaded && (\n          <div role=\"status\" aria-live=\"polite\">\n            <DelayedRender>\n              <div className={this._classNames.screenReaderText}>{ariaLabel}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]}