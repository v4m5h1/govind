{"version":3,"file":"ColorPicker.base.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorPicker.base.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,6CAAoE;AAEpE,6CAA4C;AAC5C,kEAAiE;AACjE,yDAAwD;AAExD,uDAA6D;AAC7D,+EAA8E;AAC9E,2EAA0E;AAC1E,yDAAwD;AACxD,yDAAwD;AAQxD,IAAM,aAAa,GAAG,8BAAkB,EAA8C,CAAC;AAEvF,IAAM,eAAe,GAAyB,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAE1E;;GAEG;AACH;IAAqC,2CAAmD;IAiBtF,yBAAY,KAAwB;QAApC,YACE,kBAAM,KAAK,CAAC,SAuBb;QAoFO,kBAAY,GAAG,UAAC,EAAiC,EAAE,KAAa;YACtE,KAAI,CAAC,YAAY,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QAC/B,CAAC,CAAC;QAEM,iBAAW,GAAG,UAAC,EAAiC,EAAE,CAAS;YACjE,KAAI,CAAC,YAAY,CAAC,EAAE,EAAE,iBAAO,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC;QAEM,iBAAW,GAAG,UAAC,EAAiC,EAAE,CAAS;YACjE,KAAI,CAAC,YAAY,CAAC,EAAE,EAAE,iBAAO,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC;QAnHA,KAAI,CAAC,iBAAiB,CAAC;YACrB,cAAc,EAAE,UAAU;SAC3B,CAAC,CAAC;QAEH,KAAI,CAAC,KAAK,GAAG;YACX,KAAK,EAAE,kBAAkB,CAAC,KAAK,CAAC,IAAI,uCAAkB,CAAC,SAAS,CAAE;SACnE,CAAC;QAEF,KAAI,CAAC,mBAAmB,GAAG,EAAS,CAAC;QACrC,KAAI,CAAC,iBAAiB,GAAG,EAAS,CAAC;QACnC,KAAwB,UAAe,EAAf,mCAAe,EAAf,6BAAe,EAAf,IAAe;YAAlC,IAAM,SAAS,wBAAA;YAClB,KAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,GAAG,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAI,EAAE,SAAS,CAAC,CAAC;YAC/E,KAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAI,EAAE,SAAS,CAAC,CAAC;SAC5E;QACD,KAAI,CAAC,WAAW,GAAG;YACjB,CAAC,EAAE,KAAK,CAAC,QAAQ;YACjB,CAAC,EAAE,KAAK,CAAC,UAAU;YACnB,CAAC,EAAE,KAAK,CAAC,SAAS;YAClB,CAAC,EAAE,KAAK,CAAC,UAAU;YACnB,GAAG,EAAE,KAAK,CAAC,QAAQ;SACpB,CAAC;;IACJ,CAAC;IAED,sBAAW,kCAAK;aAAhB;YACE,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAC1B,CAAC;;;OAAA;IAEM,mDAAyB,GAAhC,UAAiC,QAA2B;QAC1D,IAAM,KAAK,GAAG,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAC3C,IAAI,KAAK,EAAE;YACT,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;SACrC;IACH,CAAC;IAEM,gCAAM,GAAb;QAAA,iBA6DC;QA5DC,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACjB,IAAA,mBAAK,EAAE,2BAAS,EAAE,qBAAM,CAAW;QACnC,IAAA,wBAAK,CAAgB;QAE7B,IAAM,UAAU,GAAG,aAAa,CAAC,MAAO,EAAE;YACxC,KAAK,EAAE,KAAM;YACb,SAAS,WAAA;SACV,CAAC,CAAC;QAEH,OAAO,CACL,6BAAK,SAAS,EAAE,UAAU,CAAC,IAAI;YAC7B,6BAAK,SAAS,EAAE,UAAU,CAAC,KAAK;gBAC9B,oBAAC,+BAAc,IAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,YAAY,GAAI;gBAC7D,oBAAC,yBAAW,IAAC,SAAS,EAAC,QAAQ,EAAC,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,sBAAa,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,GAAI;gBACnH,CAAC,KAAK,CAAC,iBAAiB,IAAI,CAC3B,oBAAC,yBAAW,IACV,SAAS,EAAC,UAAU,EACpB,OAAO,QACP,YAAY,EAAE,EAAE,UAAU,EAAE,+CAA6C,KAAK,CAAC,GAAG,WAAQ,EAAE,EAC5F,QAAQ,EAAE,CAAC,EACX,QAAQ,EAAE,GAAG,EACb,KAAK,EAAE,KAAK,CAAC,CAAC,EACd,QAAQ,EAAE,IAAI,CAAC,WAAW,GAC1B,CACH;gBACD,+BAAO,SAAS,EAAE,UAAU,CAAC,KAAK,EAAE,WAAW,EAAC,GAAG,EAAC,WAAW,EAAC,GAAG;oBACjE;wBACE,4BAAI,SAAS,EAAE,UAAU,CAAC,WAAW;4BACnC,4BAAI,SAAS,EAAE,UAAU,CAAC,YAAY,IAAG,KAAK,CAAC,QAAQ,CAAM;4BAC7D,gCAAK,KAAK,CAAC,QAAQ,CAAM;4BACzB,gCAAK,KAAK,CAAC,UAAU,CAAM;4BAC3B,gCAAK,KAAK,CAAC,SAAS,CAAM;4BACzB,CAAC,KAAK,CAAC,iBAAiB,IAAI,gCAAK,KAAK,CAAC,UAAU,CAAM,CACrD,CACC;oBACR;wBACE,gCACM,eAAe,CAAC,GAAG,CAAC,UAAC,IAAmB;4BAC1C,IAAI,IAAI,KAAK,GAAG,IAAI,KAAK,CAAC,iBAAiB,EAAE;gCAC3C,OAAO,IAAI,CAAC;6BACb;4BACD,OAAO,CACL,4BAAI,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE;gCACjE,oBAAC,qBAAS,IACR,SAAS,EAAE,UAAU,CAAC,KAAK,EAC3B,QAAQ,EAAE,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EACxC,MAAM,EAAE,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EACpC,KAAK,EAAE,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAClC,UAAU,EAAE,KAAK,EACjB,SAAS,EAAE,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GACjC,CACC,CACN,CAAC;wBACJ,CAAC,CAAC,CACC,CACC,CACF,CACJ,CACF,CACP,CAAC;IACJ,CAAC;IAEO,0CAAgB,GAAxB,UAAyB,SAAuB;QACtC,IAAA,wBAAK,CAAgB;QAC7B,IAAI,OAAO,KAAK,CAAC,SAAS,CAAC,KAAK,QAAQ,EAAE;YACxC,OAAO,MAAM,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAE,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;SAC/E;QACD,OAAQ,KAAK,CAAC,SAAS,CAAY,IAAI,EAAE,CAAC;IAC5C,CAAC;IAcO,uCAAa,GAArB,UAAsB,SAAwB,EAAE,KAAwC,EAAE,QAAiB;QACzG,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAC/B,IAAM,KAAK,GAAG,SAAS,KAAK,KAAK,CAAC;QAClC,IAAI,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,KAAK,QAAQ,EAAE;YACzC,OAAO;SACR;QAED,IAAI,QAA4B,CAAC;QACjC,IAAI,KAAK,EAAE;YACT,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;gBACrC,QAAQ,GAAG,uCAAkB,CAAC,GAAG,GAAG,QAAQ,CAAC,CAAC;aAC/C;SACF;aAAM;YACL,QAAQ,GAAG,mCAAgB;oBACzB,CAAC,EAAE,KAAK,CAAC,CAAC;oBACV,CAAC,EAAE,KAAK,CAAC,CAAC;oBACV,CAAC,EAAE,KAAK,CAAC,CAAC;oBACV,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,GAAG;;gBACjB,GAAC,SAAS,IAAG,MAAM,CAAC,QAAQ,CAAC;oBAC7B,CAAC;SACJ;QACD,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;;IACrC,CAAC;IAEO,qCAAW,GAAnB,UAAoB,SAAwB,EAAE,KAAwC;QACpF,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAC/B,IAAM,KAAK,GAAG,SAAS,KAAK,KAAK,CAAC;QAClC,IAAM,QAAQ,GAAG,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC;QAE3C,IAAI,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,KAAK,QAAQ,EAAE;YACzC,OAAO;SACR;QAED,IAAI,KAAK,EAAE;YACT,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,uCAAkB,CAAC,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC;SAC9D;IACH,CAAC;IAED;;;;OAIG;IACK,sCAAY,GAApB,UAAqB,EAAiD,EAAE,QAA4B;QAClG,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO;SACR;QAED,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACjB,IAAA,wBAAK,CAAgB;QAC7B,IAAM,gBAAgB,GAAG,QAAQ,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,IAAI,QAAQ,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,CAAC;QAE9E,IAAI,gBAAgB,EAAE;YACpB,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE;gBACjC,IAAI,EAAE,IAAI,KAAK,CAAC,QAAQ,EAAE;oBACxB,KAAK,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;iBAC9B;gBAED,0FAA0F;gBAC1F,0CAA0C;gBAC1C,IAAI,KAAK,CAAC,cAAc,EAAE;oBACxB,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;iBAC9C;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAzMa,4BAAY,GAAG;QAC3B,QAAQ,EAAE,KAAK;QACf,QAAQ,EAAE,KAAK;QACf,UAAU,EAAE,OAAO;QACnB,SAAS,EAAE,MAAM;QACjB,UAAU,EAAE,OAAO;KACpB,CAAC;IAoMJ,sBAAC;CAAA,AA3MD,CAAqC,yBAAa,GA2MjD;AA3MY,0CAAe;AA6M5B,4BAA4B,KAAwB;IAC1C,IAAA,mBAAK,CAAW;IACxB,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,uCAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;AACvE,CAAC","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, classNamesFunction } from '../../Utilities';\nimport { IColorPickerProps, IColorPickerStyleProps, IColorPickerStyles, IColorPicker } from './ColorPicker.types';\nimport { TextField } from '../../TextField';\nimport { ColorRectangle } from './ColorRectangle/ColorRectangle';\nimport { ColorSlider } from './ColorSlider/ColorSlider';\nimport { IColor } from '../../utilities/color/interfaces';\nimport { MAX_COLOR_HUE } from '../../utilities/color/consts';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { getColorFromRGBA } from '../../utilities/color/getColorFromRGBA';\nimport { updateA } from '../../utilities/color/updateA';\nimport { updateH } from '../../utilities/color/updateH';\n\ntype IRGBHex = Pick<IColor, 'r' | 'g' | 'b' | 'a' | 'hex'>;\n\nexport interface IColorPickerState {\n  color: IColor;\n}\n\nconst getClassNames = classNamesFunction<IColorPickerStyleProps, IColorPickerStyles>();\n\nconst colorComponents: Array<keyof IRGBHex> = ['hex', 'r', 'g', 'b', 'a'];\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorPickerBase extends BaseComponent<IColorPickerProps, IColorPickerState> implements IColorPicker {\n  public static defaultProps = {\n    hexLabel: 'Hex',\n    redLabel: 'Red',\n    greenLabel: 'Green',\n    blueLabel: 'Blue',\n    alphaLabel: 'Alpha'\n  };\n\n  private _textChangeHandlers: {\n    [K in keyof IRGBHex]: (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void\n  };\n  private _textBlurHandlers: {\n    [K in keyof IRGBHex]: (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void\n  };\n  private _textLabels: { [K in keyof IRGBHex]?: string };\n\n  constructor(props: IColorPickerProps) {\n    super(props);\n\n    this._warnDeprecations({\n      onColorChanged: 'onChange'\n    });\n\n    this.state = {\n      color: _getColorFromProps(props) || getColorFromString('#ffffff')!\n    };\n\n    this._textChangeHandlers = {} as any;\n    this._textBlurHandlers = {} as any;\n    for (const component of colorComponents) {\n      this._textChangeHandlers[component] = this._onTextChange.bind(this, component);\n      this._textBlurHandlers[component] = this._onTextBlur.bind(this, component);\n    }\n    this._textLabels = {\n      r: props.redLabel,\n      g: props.greenLabel,\n      b: props.blueLabel,\n      a: props.alphaLabel,\n      hex: props.hexLabel\n    };\n  }\n\n  public get color(): IColor {\n    return this.state.color;\n  }\n\n  public componentWillReceiveProps(newProps: IColorPickerProps): void {\n    const color = _getColorFromProps(newProps);\n    if (color) {\n      this._updateColor(undefined, color);\n    }\n  }\n\n  public render(): JSX.Element {\n    const props = this.props;\n    const { theme, className, styles } = props;\n    const { color } = this.state;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className\n    });\n\n    return (\n      <div className={classNames.root}>\n        <div className={classNames.panel}>\n          <ColorRectangle color={color} onChange={this._onSVChanged} />\n          <ColorSlider className=\"is-hue\" minValue={0} maxValue={MAX_COLOR_HUE} value={color.h} onChange={this._onHChanged} />\n          {!props.alphaSliderHidden && (\n            <ColorSlider\n              className=\"is-alpha\"\n              isAlpha\n              overlayStyle={{ background: `linear-gradient(to right, transparent 0, #${color.hex} 100%)` }}\n              minValue={0}\n              maxValue={100}\n              value={color.a}\n              onChange={this._onAChanged}\n            />\n          )}\n          <table className={classNames.table} cellPadding=\"0\" cellSpacing=\"0\">\n            <thead>\n              <tr className={classNames.tableHeader}>\n                <td className={classNames.tableHexCell}>{props.hexLabel}</td>\n                <td>{props.redLabel}</td>\n                <td>{props.greenLabel}</td>\n                <td>{props.blueLabel}</td>\n                {!props.alphaSliderHidden && <td>{props.alphaLabel}</td>}\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                {...colorComponents.map((comp: keyof IRGBHex) => {\n                  if (comp === 'a' && props.alphaSliderHidden) {\n                    return null;\n                  }\n                  return (\n                    <td key={comp} style={comp === 'hex' ? undefined : { width: '18%' }}>\n                      <TextField\n                        className={classNames.input}\n                        onChange={this._textChangeHandlers[comp]}\n                        onBlur={this._textBlurHandlers[comp]}\n                        value={this._getDisplayValue(comp)}\n                        spellCheck={false}\n                        ariaLabel={this._textLabels[comp]}\n                      />\n                    </td>\n                  );\n                })}\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n\n  private _getDisplayValue(component: keyof IColor): string {\n    const { color } = this.state;\n    if (typeof color[component] === 'number') {\n      return String(component === 'a' ? color.a!.toPrecision(3) : color[component]);\n    }\n    return (color[component] as string) || '';\n  }\n\n  private _onSVChanged = (ev: React.MouseEvent<HTMLElement>, color: IColor): void => {\n    this._updateColor(ev, color);\n  };\n\n  private _onHChanged = (ev: React.MouseEvent<HTMLElement>, h: number): void => {\n    this._updateColor(ev, updateH(this.state.color, h));\n  };\n\n  private _onAChanged = (ev: React.MouseEvent<HTMLElement>, a: number): void => {\n    this._updateColor(ev, updateA(this.state.color, a));\n  };\n\n  private _onTextChange(component: keyof IRGBHex, event: React.FormEvent<HTMLInputElement>, newValue?: string): void {\n    const color = this.state.color;\n    const isHex = component === 'hex';\n    if (String(color[component]) === newValue) {\n      return;\n    }\n\n    let newColor: IColor | undefined;\n    if (isHex) {\n      if (newValue && newValue.length === 6) {\n        newColor = getColorFromString('#' + newValue);\n      }\n    } else {\n      newColor = getColorFromRGBA({\n        r: color.r,\n        g: color.g,\n        b: color.b,\n        a: color.a || 100,\n        [component]: Number(newValue)\n      });\n    }\n    this._updateColor(event, newColor);\n  }\n\n  private _onTextBlur(component: keyof IRGBHex, event: React.FormEvent<HTMLInputElement>): void {\n    const color = this.state.color;\n    const isHex = component === 'hex';\n    const newValue = event.currentTarget.value;\n\n    if (String(color[component]) === newValue) {\n      return;\n    }\n\n    if (isHex) {\n      this._updateColor(event, getColorFromString('#' + newValue));\n    }\n  }\n\n  /**\n   * Update the displayed color and call change handlers if appropriate.\n   * @param ev - Event if call was triggered by an event (undefined if triggered by props change)\n   * @param newColor - Updated color\n   */\n  private _updateColor(ev: React.SyntheticEvent<HTMLElement> | undefined, newColor: IColor | undefined): void {\n    if (!newColor) {\n      return;\n    }\n\n    const props = this.props;\n    const { color } = this.state;\n    const isDifferentColor = newColor.h !== color.h || newColor.str !== color.str;\n\n    if (isDifferentColor) {\n      this.setState({ color: newColor }, () => {\n        if (ev && props.onChange) {\n          props.onChange(ev, newColor);\n        }\n\n        // To preserve the existing behavior, this one is called even when the change comes from a\n        // props update (which is not very useful)\n        if (props.onColorChanged) {\n          props.onColorChanged(newColor.str, newColor);\n        }\n      });\n    }\n  }\n}\n\nfunction _getColorFromProps(props: IColorPickerProps): IColor | undefined {\n  const { color } = props;\n  return typeof color === 'string' ? getColorFromString(color) : color;\n}\n"]}