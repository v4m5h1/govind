{"version":3,"file":"Icon.types.js","sourceRoot":"../src/","sources":["components/Icon/Icon.types.ts"],"names":[],"mappings":";;AAKA,2BAA2B;AAC3B,IAAY,QAsBX;AAtBD,WAAY,QAAQ;IAClB;;OAEG;IACH,6CAAW,CAAA;IAEX;;OAEG;IACH,yCAAS,CAAA;IAET;;;OAGG;IACH,kDAAgB,CAAA;IAEhB;;;OAGG;IACH,8CAAc,CAAA;AAChB,CAAC,EAtBW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAsBnB","sourcesContent":["import * as React from 'react';\nimport { IImageProps } from '../Image/Image.types';\nimport { IStyle, ITheme } from '../../Styling';\nimport { IBaseProps, IStyleFunctionOrObject } from '../../Utilities';\n\n// Please keep alphabetized\nexport enum IconType {\n  /**\n   * Render using the fabric icon font.\n   */\n  default = 0,\n\n  /**\n   * Render using an image, where imageProps would be used.\n   */\n  image = 1,\n\n  /**\n   * Deprecated, use `default`.\n   * @deprecated Use `default`.\n   */\n  Default = 100000,\n\n  /**\n   * Deprecated, use `image`.\n   * @deprecated Use `image`.\n   */\n  Image = 100001\n}\n\n/**\n * {@docCategory Icon}\n */\nexport interface IIconProps extends IBaseProps, React.HTMLAttributes<HTMLElement> {\n  /**\n   * The name of the icon to use from the icon font. If string is empty, a placeholder icon will be rendered the same width as an icon\n   */\n  iconName?: string;\n\n  /**\n   * The aria label of the button for the benefit of screen readers.\n   */\n  ariaLabel?: string;\n\n  /**\n   * The type of icon to render (image or icon font).\n   */\n  iconType?: IconType;\n\n  /**\n   * If rendering an image icon, these props will be passed to the Image component.\n   */\n  imageProps?: IImageProps;\n\n  /**\n   * If rendering an image icon, this function callback will be invoked in the event loading the image errors.\n   */\n  imageErrorAs?: React.StatelessComponent<IImageProps> | React.ComponentClass<IImageProps>;\n\n  /**\n   * Gets the styles for an Icon.\n   */\n  styles?: IStyleFunctionOrObject<IIconStyleProps, IIconStyles>;\n  theme?: ITheme;\n}\n\n/**\n * {@docCategory Icon}\n */\nexport interface IIconStyleProps {\n  className?: string;\n  iconClassName?: string;\n  isPlaceholder: boolean;\n  isImage: boolean;\n  styles?: Partial<IIconStyles>;\n  theme?: ITheme;\n}\n\n/**\n * {@docCategory Icon}\n */\nexport interface IIconStyles {\n  root?: IStyle;\n\n  /**\n   * Deprecated. Use `root`.\n   * @deprecated Use `root`.\n   */\n  imageContainer?: IStyle;\n}\n"]}