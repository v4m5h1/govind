{"version":3,"file":"DetailsRowFields.js","sourceRoot":"../src/","sources":["components/DetailsList/DetailsRowFields.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IColumn } from './DetailsList.types';\nimport { css } from '../../Utilities';\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\n\nconst getCellText = (item: any, column: IColumn): string => {\n  let value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  return value;\n};\n\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport class DetailsRowFields extends React.PureComponent<IDetailsRowFieldsProps> {\n  public render(): JSX.Element {\n    const {\n      columns,\n      columnStartIndex,\n      shimmer,\n      rowClassNames,\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n      item,\n      itemIndex,\n      onRenderItemColumn,\n      getCellValueKey,\n      cellsByColumn\n    } = this.props;\n\n    return (\n      <div className={rowClassNames.fields} data-automationid=\"DetailsRowFields\" role=\"presentation\">\n        {columns.map((column, columnIndex) => {\n          const width: string | number =\n            typeof column.calculatedWidth === 'undefined'\n              ? 'auto'\n              : column.calculatedWidth +\n                cellStyleProps.cellLeftPadding +\n                cellStyleProps.cellRightPadding +\n                (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n          const { onRender = onRenderItemColumn, getValueKey = getCellValueKey } = column;\n          const cellContentsRender =\n            cellsByColumn && column.key in cellsByColumn\n              ? cellsByColumn[column.key]\n              : onRender && !shimmer\n              ? onRender(item, itemIndex, column)\n              : getCellText(item, column);\n\n          // generate a key that auto-dirties when content changes, to force the container to re-render, to trigger animation\n          const key = getValueKey ? getValueKey(item, itemIndex, column) : column.key + itemIndex;\n          return (\n            <div\n              key={key}\n              role={column.isRowHeader ? 'rowheader' : 'gridcell'}\n              aria-colindex={columnIndex + columnStartIndex + 1}\n              className={css(\n                column.className,\n                column.isMultiline && rowClassNames.isMultiline,\n                column.isRowHeader && rowClassNames.isRowHeader,\n                column.isIconOnly && shimmer && rowClassNames.shimmerIconPlaceholder,\n                shimmer && rowClassNames.shimmer,\n                rowClassNames.cell,\n                column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded,\n                rowClassNames.cellAnimation\n              )}\n              style={{ width }}\n              data-automationid=\"DetailsRowCell\"\n              data-automation-key={column.key}\n            >\n              {cellContentsRender}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n"]}