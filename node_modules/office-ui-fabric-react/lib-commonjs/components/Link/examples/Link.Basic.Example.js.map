{"version":3,"file":"Link.Basic.Example.js","sourceRoot":"../src/","sources":["components/Link/examples/Link.Basic.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,wDAAuD;AACvD,4CAA8C;AAE9C;IAAsC,4CAAyB;IAA/D;;IAuBA,CAAC;IAtBQ,iCAAM,GAAb;QACE,OAAO,CACL,6BAAK,SAAS,EAAE,MAAM,CAAC,WAAW;YAChC,8DAAsC;YACtC,oBAAC,WAAI,IAAC,IAAI,EAAC,8CAA8C,mCAAoC;YAC7F,uDAA+B;YAC/B,oBAAC,WAAI,2CAAwC;;YAAC,0FAAkE;YAChH,oBAAC,WAAI,IAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAC,8CAA8C,qBAElE;YACP;gBACG,GAAG;;gBACmB,oBAAC,WAAI,IAAC,IAAI,EAAC,8CAA8C,qCAAsC,CACjH;YACP,+BAAM;YACN,+BAAM;oUAIF,CACP,CAAC;IACJ,CAAC;IACH,uBAAC;AAAD,CAAC,AAvBD,CAAsC,KAAK,CAAC,SAAS,GAuBpD;AAvBY,4CAAgB","sourcesContent":["import * as React from 'react';\nimport { Link } from 'office-ui-fabric-react/lib/Link';\nimport * as styles from './Link.Example.scss';\n\nexport class LinkBasicExample extends React.Component<any, any> {\n  public render(): JSX.Element {\n    return (\n      <div className={styles.linkExample}>\n        <span>When a link has an href, </span>\n        <Link href=\"http://dev.office.com/fabric/components/link\">it renders as an anchor tag.</Link>\n        <span> Without an href, </span>\n        <Link>the link is rendered as a button</Link>.<span> You can also use the disabled attribute to create a </span>\n        <Link disabled={true} href=\"http://dev.office.com/fabric/components/link\">\n          disabled link.\n        </Link>\n        <span>\n          {' '}\n          Example of a Link with <Link href=\"http://dev.office.com/fabric/components/link\">mixed link content that wraps.</Link>\n        </span>\n        <br />\n        <br />\n        It's not recommended to use Links with imgs because Links are meant to render textual inline content. Buttons are inline-block or in\n        the case of imgs, block. However, it is possible to create a linked image button by making a button with an unstyled variant and\n        adding the img content and href source to that.\n      </div>\n    );\n  }\n}\n"]}