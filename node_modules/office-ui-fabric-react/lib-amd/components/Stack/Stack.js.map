{"version":3,"file":"Stack.js","sourceRoot":"../src/","sources":["components/Stack/Stack.tsx"],"names":[],"mappings":";;;IASA,IAAM,aAAa,GAAI,uBAAC,mBAAS,OAA2C,CAAC,IAAI,CAAC;IAElF,IAAM,IAAI,GAA4B,UAAA,KAAK;QACjC,IAAA,aAAoB,EAApB,qCAAoB,EAAE,mCAAa,EAAE,iBAAI,EAAE,6DAAO,CAAW;QAErE,IAAM,aAAa,GAAgC,KAAK,CAAC,QAAQ,CAAC,GAAG,CACnE,KAAK,CAAC,QAAQ,EACd,UAAC,KAA0C,EAAE,KAAa;YACxD,IAAI,CAAC,KAAK,EAAE;gBACV,OAAO,IAAI,CAAC;aACb;YAED,IAAI,KAAK,CAAC,IAAI,KAAK,aAAa,EAAE;gBAChC,IAAM,gBAAgB,GAAoB;oBACxC,MAAM,EAAE,CAAC,aAAa;iBACvB,CAAC;gBAEF,OAAO,KAAK,CAAC,YAAY,CAAC,KAAK,uBAC1B,gBAAgB,EAChB,KAAK,CAAC,KAAK,EACd,CAAC;aACJ;YAED,OAAO,KAAK,CAAC;QACf,CAAC,CACF,CAAC;QAEF,IAAM,WAAW,GAAG,0BAAc,CAAC,IAAI,EAAE,iCAAqB,CAAC,CAAC;QAEhE,IAAM,KAAK,GAAG,qBAAQ,CAA2B,KAAK,EAAE;YACtD,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,KAAK;SACb,CAAC,CAAC;QAEH,IAAI,IAAI,EAAE;YACR,OAAO,CACL,uBAAC,KAAK,CAAC,IAAI,uBAAK,WAAW;gBACzB,uBAAC,KAAK,CAAC,KAAK,QAAE,aAAa,CAAe,CAC/B,CACd,CAAC;SACH;QAED,OAAO,uBAAC,KAAK,CAAC,IAAI,uBAAK,WAAW,GAAG,aAAa,CAAc,CAAC;IACnE,CAAC,CAAC;IAEF,IAAM,YAAY,GAAG;QACnB,IAAI,EAAE,mBAAS;KAChB,CAAC;IAEW,QAAA,KAAK,GAEd,4BAAe,CAAC;QAClB,WAAW,EAAE,OAAO;QACpB,MAAM,uBAAA;QACN,IAAI,MAAA;QACJ,OAAO,EAAE,YAAY;KACtB,CAAC,CAAC;IAEH,kBAAe,aAAK,CAAC","sourcesContent":["/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '../../Foundation';\nimport StackItem from './StackItem/StackItem';\nimport { IStackItemProps } from './StackItem/StackItem.types';\nimport { IStackComponent, IStackProps, IStackSlots } from './Stack.types';\nimport { styles } from './Stack.styles';\nimport { getNativeProps, htmlElementProperties } from '../../Utilities';\n\nconst StackItemType = (<StackItem /> as React.ReactElement<IStackItemProps>).type;\n\nconst view: IStackComponent['view'] = props => {\n  const { as: RootType = 'div', disableShrink, wrap, ...rest } = props;\n\n  const stackChildren: (React.ReactChild | null)[] = React.Children.map(\n    props.children,\n    (child: React.ReactElement<IStackItemProps>, index: number) => {\n      if (!child) {\n        return null;\n      }\n\n      if (child.type === StackItemType) {\n        const defaultItemProps: IStackItemProps = {\n          shrink: !disableShrink\n        };\n\n        return React.cloneElement(child, {\n          ...defaultItemProps,\n          ...child.props\n        });\n      }\n\n      return child;\n    }\n  );\n\n  const nativeProps = getNativeProps(rest, htmlElementProperties);\n\n  const Slots = getSlots<IStackProps, IStackSlots>(props, {\n    root: RootType,\n    inner: 'div'\n  });\n\n  if (wrap) {\n    return (\n      <Slots.root {...nativeProps}>\n        <Slots.inner>{stackChildren}</Slots.inner>\n      </Slots.root>\n    );\n  }\n\n  return <Slots.root {...nativeProps}>{stackChildren}</Slots.root>;\n};\n\nconst StackStatics = {\n  Item: StackItem\n};\n\nexport const Stack: React.StatelessComponent<IStackProps> & {\n  Item: React.StatelessComponent<IStackItemProps>;\n} = createComponent({\n  displayName: 'Stack',\n  styles,\n  view,\n  statics: StackStatics\n});\n\nexport default Stack;\n"]}