define(["require", "exports", "tslib", "../../Styling"], function (require, exports, tslib_1, Styling_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GlobalClassNames = {
        root: 'ms-Dropdown-container',
        label: 'ms-Dropdown-label',
        dropdown: 'ms-Dropdown',
        title: 'ms-Dropdown-title',
        caretDownWrapper: 'ms-Dropdown-caretDownWrapper',
        caretDown: 'ms-Dropdown-caretDown',
        callout: 'ms-Dropdown-callout',
        panel: 'ms-Dropdown-panel',
        dropdownItems: 'ms-Dropdown-items',
        dropdownItem: 'ms-Dropdown-item',
        dropdownDivider: 'ms-Dropdown-divider',
        dropdownOptionText: 'ms-Dropdown-optionText',
        dropdownItemHeader: 'ms-Dropdown-header',
        titleIsPlaceHolder: 'ms-Dropdown-titleIsPlaceHolder',
        titleHasError: 'ms-Dropdown-title--hasError'
    };
    var DROPDOWN_HEIGHT = 32;
    var DROPDOWN_ITEM_HEIGHT = 32;
    var highContrastAdjustMixin = (_a = {},
        _a[Styling_1.HighContrastSelector + ", " + Styling_1.HighContrastSelectorWhite.replace('@media ', '')] = {
            MsHighContrastAdjust: 'none'
        },
        _a);
    var highContrastItemAndTitleStateMixin = {
        selectors: tslib_1.__assign((_b = {}, _b[Styling_1.HighContrastSelector] = {
            backgroundColor: 'Highlight',
            borderColor: 'Highlight',
            color: 'HighlightText',
            selectors: {
                ':hover': {
                    color: 'HighlightText' // overrides the hover styling for buttons that are also selected
                }
            }
        }, _b), highContrastAdjustMixin)
    };
    var highContrastBorderState = {
        selectors: (_c = {},
            _c[Styling_1.HighContrastSelector] = {
                borderColor: 'Highlight'
            },
            _c)
    };
    var MinimumScreenSelector = Styling_1.getScreenSelector(0, Styling_1.ScreenWidthMinMedium);
    exports.getStyles = function (props) {
        var theme = props.theme, hasError = props.hasError, hasLabel = props.hasLabel, className = props.className, isOpen = props.isOpen, disabled = props.disabled, required = props.required, isRenderingPlaceholder = props.isRenderingPlaceholder, panelClassName = props.panelClassName, calloutClassName = props.calloutClassName;
        if (!theme) {
            throw new Error('theme is undefined or null in base Dropdown getStyles function.');
        }
        var globalClassnames = Styling_1.getGlobalClassNames(GlobalClassNames, theme);
        var palette = theme.palette, semanticColors = theme.semanticColors;
        var rootHoverFocusActiveSelectorNeutralDarkMixin = {
            color: semanticColors.menuItemTextHovered
        };
        var rootHoverFocusActiveSelectorBodySubtextMixin = {
            color: semanticColors.bodySubtext
        };
        var borderColorError = {
            borderColor: semanticColors.errorText
        };
        var dropdownItemStyle = [
            globalClassnames.dropdownItem,
            {
                backgroundColor: 'transparent',
                boxSizing: 'border-box',
                cursor: 'pointer',
                display: 'block',
                padding: '4px 16px',
                width: '100%',
                minHeight: DROPDOWN_ITEM_HEIGHT,
                lineHeight: 20,
                height: 'auto',
                position: 'relative',
                border: '1px solid transparent',
                wordWrap: 'break-word',
                overflowWrap: 'break-word',
                textAlign: 'left'
            }
        ];
        var dropdownItemSelected = dropdownItemStyle.concat([
            {
                backgroundColor: palette.neutralQuaternaryAlt,
                color: palette.black
            },
            highContrastItemAndTitleStateMixin
        ]);
        var dropdownItemDisabled = dropdownItemStyle.concat([
            {
                color: semanticColors.disabledText,
                cursor: 'default'
            }
        ]);
        return {
            root: globalClassnames.root,
            label: globalClassnames.label,
            dropdown: [
                globalClassnames.dropdown,
                Styling_1.normalize,
                tslib_1.__assign({}, theme.fonts.medium, { color: semanticColors.menuItemText, position: 'relative', outline: 0, userSelect: 'none', selectors: (_a = {},
                        _a['&:hover .' + globalClassnames.title] = [
                            !disabled && rootHoverFocusActiveSelectorNeutralDarkMixin,
                            { borderColor: palette.neutralDark },
                            highContrastBorderState
                        ],
                        _a['&:focus .' + globalClassnames.title] = [
                            !disabled && rootHoverFocusActiveSelectorNeutralDarkMixin,
                            {
                                borderColor: palette.themePrimary /* see https://github.com/OfficeDev/office-ui-fabric-react/pull/9182 for semantic color disc */
                            },
                            highContrastItemAndTitleStateMixin
                        ],
                        _a['&:active .' + globalClassnames.title] = [
                            !disabled && rootHoverFocusActiveSelectorNeutralDarkMixin,
                            { borderColor: palette.themeDark },
                            highContrastBorderState
                        ],
                        _a['&:hover .' + globalClassnames.caretDown] = !disabled && rootHoverFocusActiveSelectorNeutralDarkMixin,
                        _a['&:focus .' + globalClassnames.caretDown] = [
                            !disabled && rootHoverFocusActiveSelectorNeutralDarkMixin,
                            { selectors: tslib_1.__assign((_b = {}, _b[Styling_1.HighContrastSelector] = { color: 'HighlightText' }, _b), highContrastAdjustMixin) }
                        ],
                        _a['&:active .' + globalClassnames.caretDown] = !disabled && rootHoverFocusActiveSelectorNeutralDarkMixin,
                        _a['&:hover .' + globalClassnames.titleIsPlaceHolder] = rootHoverFocusActiveSelectorBodySubtextMixin,
                        _a['&:focus .' + globalClassnames.titleIsPlaceHolder] = rootHoverFocusActiveSelectorBodySubtextMixin,
                        _a['&:active .' + globalClassnames.titleIsPlaceHolder] = rootHoverFocusActiveSelectorBodySubtextMixin,
                        _a['&:hover .' + globalClassnames.titleHasError] = borderColorError,
                        _a['&:active .' + globalClassnames.titleHasError] = borderColorError,
                        _a['&:focus .' + globalClassnames.titleHasError] = borderColorError,
                        _a) }),
                className,
                isOpen && 'is-open',
                disabled && 'is-disabled',
                required && 'is-required',
                required &&
                    !hasLabel && {
                    selectors: (_c = {
                            ':after': {
                                content: "'*'",
                                color: semanticColors.errorText,
                                position: 'absolute',
                                top: -5,
                                right: -10
                            }
                        },
                        _c[Styling_1.HighContrastSelector] = {
                            selectors: {
                                ':after': {
                                    right: -14 // moving the * 4 pixel to right to alleviate border clipping in HC mode.
                                }
                            }
                        },
                        _c)
                }
            ],
            title: [
                globalClassnames.title,
                Styling_1.normalize,
                {
                    backgroundColor: semanticColors.inputBackground,
                    borderWidth: 1,
                    borderStyle: 'solid',
                    borderColor: semanticColors.inputBorder,
                    cursor: 'pointer',
                    display: 'block',
                    height: DROPDOWN_HEIGHT,
                    lineHeight: DROPDOWN_HEIGHT - 2,
                    padding: "0 " + DROPDOWN_HEIGHT + "px 0 12px",
                    position: 'relative',
                    overflow: 'hidden',
                    whiteSpace: 'nowrap',
                    textOverflow: 'ellipsis'
                },
                isRenderingPlaceholder && [globalClassnames.titleIsPlaceHolder, { color: semanticColors.inputPlaceholderText }],
                hasError && [globalClassnames.titleHasError, borderColorError],
                disabled && {
                    backgroundColor: semanticColors.disabledBackground,
                    border: 'none',
                    color: semanticColors.disabledText,
                    cursor: 'default',
                    selectors: (_d = {}, _d[Styling_1.HighContrastSelector] = { border: '1px solid GrayText', color: 'GrayText' }, _d)
                }
            ],
            caretDownWrapper: [
                globalClassnames.caretDownWrapper,
                {
                    position: 'absolute',
                    top: 1,
                    right: 12,
                    height: DROPDOWN_HEIGHT,
                    lineHeight: DROPDOWN_HEIGHT - 2 // height minus the border
                },
                !disabled && {
                    cursor: 'pointer'
                }
            ],
            caretDown: [
                globalClassnames.caretDown,
                { color: semanticColors.bodySubtext, fontSize: Styling_1.FontSizes.small, pointerEvents: 'none' },
                disabled && { color: semanticColors.disabledText, selectors: (_e = {}, _e[Styling_1.HighContrastSelector] = { color: 'GrayText' }, _e) }
            ],
            errorMessage: tslib_1.__assign({ color: semanticColors.errorText }, theme.fonts.small, { paddingTop: 5 }),
            callout: [
                globalClassnames.callout,
                {
                    boxShadow: '0 0 2px 0 rgba(0,0,0,0.2)',
                    border: "1px solid " + semanticColors.variantBorder
                },
                calloutClassName
            ],
            dropdownItemsWrapper: { selectors: { '&:focus': { outline: 0 } } },
            dropdownItems: [globalClassnames.dropdownItems, { display: 'block' }],
            dropdownItem: dropdownItemStyle.concat([
                {
                    selectors: (_f = {},
                        _f[Styling_1.HighContrastSelector] = {
                            borderColor: 'Window'
                        },
                        _f['&:hover'] = {
                            color: 'inherit'
                        },
                        _f['&:focus'] = {
                            backgroundColor: semanticColors.listItemBackgroundHovered
                        },
                        _f['&:active'] = {
                            backgroundColor: semanticColors.listHeaderBackgroundHovered,
                            color: palette.black
                        },
                        _f)
                }
            ]),
            dropdownItemSelected: dropdownItemSelected,
            dropdownItemDisabled: dropdownItemDisabled,
            dropdownItemSelectedAndDisabled: [dropdownItemSelected, dropdownItemDisabled, { backgroundColor: 'transparent' }],
            dropdownItemHidden: dropdownItemStyle.concat([{ display: 'none' }]),
            dropdownDivider: [globalClassnames.dropdownDivider, { height: 1, backgroundColor: semanticColors.bodyDivider }],
            dropdownOptionText: [
                globalClassnames.dropdownOptionText,
                {
                    overflow: 'hidden',
                    whiteSpace: 'nowrap',
                    textOverflow: 'ellipsis',
                    minWidth: 0,
                    maxWidth: '100%',
                    wordWrap: 'break-word',
                    overflowWrap: 'break-word',
                    margin: '1px'
                }
            ],
            dropdownItemHeader: [
                globalClassnames.dropdownItemHeader,
                tslib_1.__assign({}, theme.fonts.medium, { fontWeight: Styling_1.FontWeights.semibold, color: semanticColors.menuHeader, background: 'none', backgroundColor: 'transparent', border: 'none', height: DROPDOWN_ITEM_HEIGHT, lineHeight: DROPDOWN_ITEM_HEIGHT, cursor: 'default', padding: '0px 16px', userSelect: 'none', textAlign: 'left' })
            ],
            subComponentStyles: {
                label: { root: { display: 'inline-block' } },
                panel: {
                    root: [panelClassName],
                    main: {
                        // Force drop shadow even under medium breakpoint
                        boxShadow: '-30px 0px 30px -30px rgba(0,0,0,0.2)',
                        selectors: (_g = {},
                            // In case of extra small screen sizes
                            _g[MinimumScreenSelector] = {
                                // panelWidth xs
                                width: 272
                            },
                            _g)
                    },
                    contentInner: { padding: '0 0 20px' }
                }
            }
        };
        var _a, _b, _c, _d, _e, _f, _g;
    };
    var _a, _b, _c;
});
//# sourceMappingURL=Dropdown.styles.js.map